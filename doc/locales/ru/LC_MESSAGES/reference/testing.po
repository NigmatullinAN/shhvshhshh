# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo 13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-07 15:02+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../reference/testing.rst:8
msgid "Testing Odoo"
msgstr ""

#: ../../reference/testing.rst:10
msgid ""
"There are many ways to test an application.  In Odoo, we have three kinds"
" of tests"
msgstr ""

#: ../../reference/testing.rst:13
msgid ""
"Python unit tests (see `Testing Python code`_): useful for testing model "
"business logic"
msgstr ""

#: ../../reference/testing.rst:14
msgid ""
"JS unit tests (see `Testing JS code`_): useful to test the javascript "
"code in isolation"
msgstr ""

#: ../../reference/testing.rst:15
msgid ""
"Tours (see `Integration Testing`_): tours simulate a real situation. They"
" ensures that the python and the javascript parts properly talk to each "
"other."
msgstr ""

#: ../../reference/testing.rst:19
msgid "Testing Python code"
msgstr ""

#: ../../reference/testing.rst:21
msgid "Odoo provides support for testing modules using unittest."
msgstr ""

#: ../../reference/testing.rst:23
msgid ""
"To write tests, simply define a ``tests`` sub-package in your module, it "
"will be automatically inspected for test modules. Test modules should "
"have a name starting with ``test_`` and should be imported from "
"``tests/__init__.py``, e.g."
msgstr ""

#: ../../reference/testing.rst:37
msgid "and ``__init__.py`` contains::"
msgstr ""

#: ../../reference/testing.rst:43
msgid ""
"test modules which are not imported from ``tests/__init__.py`` will not "
"be run"
msgstr ""

#: ../../reference/testing.rst:46
msgid ""
"The test runner will simply run any test case, as described in the "
"official `unittest documentation`_, but Odoo provides a number of "
"utilities and helpers related to testing Odoo content (modules, mainly):"
msgstr ""

#: odoo.tests.common.TransactionCase:1 of
msgid ""
"TestCase in which each test method is run in its own transaction, and "
"with its own cursor. The transaction is rolled back and the cursor is "
"closed after each test."
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref:1
#: odoo.tests.common.SingleTransactionCase.browse_ref:1
#: odoo.tests.common.TransactionCase.browse_ref:1 of
msgid "Returns a record object for the provided :term:`external identifier`"
msgstr ""

#: odoo.tests.common.Form odoo.tests.common.HttpCase.browse_ref
#: odoo.tests.common.HttpCase.ref
#: odoo.tests.common.SingleTransactionCase.browse_ref
#: odoo.tests.common.SingleTransactionCase.ref
#: odoo.tests.common.TransactionCase.browse_ref
#: odoo.tests.common.TransactionCase.ref of
msgid "Параметры"
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref:4 odoo.tests.common.HttpCase.ref:4
#: odoo.tests.common.SingleTransactionCase.browse_ref:4
#: odoo.tests.common.SingleTransactionCase.ref:4
#: odoo.tests.common.TransactionCase.browse_ref:4
#: odoo.tests.common.TransactionCase.ref:4 of
msgid ""
"fully-qualified :term:`external identifier`, in the form "
":samp:`{module}.{identifier}`"
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref odoo.tests.common.HttpCase.ref
#: odoo.tests.common.SingleTransactionCase.browse_ref
#: odoo.tests.common.SingleTransactionCase.ref
#: odoo.tests.common.TransactionCase.browse_ref
#: odoo.tests.common.TransactionCase.ref of
msgid "raise"
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref:6 odoo.tests.common.HttpCase.ref:6
#: odoo.tests.common.SingleTransactionCase.browse_ref:6
#: odoo.tests.common.SingleTransactionCase.ref:6
#: odoo.tests.common.TransactionCase.browse_ref:6
#: odoo.tests.common.TransactionCase.ref:6 of
msgid "ValueError if not found"
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref odoo.tests.common.HttpCase.ref
#: odoo.tests.common.SingleTransactionCase.browse_ref
#: odoo.tests.common.SingleTransactionCase.ref
#: odoo.tests.common.TransactionCase.browse_ref
#: odoo.tests.common.TransactionCase.ref of
msgid "Результат"
msgstr ""

#: odoo.tests.common.HttpCase.browse_ref:7
#: odoo.tests.common.SingleTransactionCase.browse_ref:7
#: odoo.tests.common.TransactionCase.browse_ref:7 of
msgid ":class:`~odoo.models.BaseModel`"
msgstr ""

#: odoo.tests.common.HttpCase.ref:1
#: odoo.tests.common.SingleTransactionCase.ref:1
#: odoo.tests.common.TransactionCase.ref:1 of
msgid ""
"Returns database ID for the provided :term:`external identifier`, "
"shortcut for ``get_object_reference``"
msgstr ""

#: odoo.tests.common.HttpCase.ref:7
#: odoo.tests.common.SingleTransactionCase.ref:7
#: odoo.tests.common.TransactionCase.ref:7 of
msgid "registered id"
msgstr ""

#: odoo.tests.common.SingleTransactionCase:1 of
msgid ""
"TestCase in which all test methods are run in the same transaction, the "
"transaction is started with the first test method and rolled back at the "
"end of the last."
msgstr ""

#: odoo.tests.common.SavepointCase:1 of
msgid ""
"Similar to :class:`SingleTransactionCase` in that all test methods are "
"run in a single transaction *but* each test case is run inside a "
"rollbacked savepoint (sub-transaction)."
msgstr ""

#: odoo.tests.common.SavepointCase:5 of
msgid ""
"Useful for test cases containing fast tests but with significant database"
" setup common to all cases (complex in-db test data): "
":meth:`~.setUpClass` can be used to generate db test data once, then all "
"test cases use the same data without influencing one another but without "
"having to recreate the test data either."
msgstr ""

#: odoo.tests.common.HttpCase:1 of
msgid "Transactional HTTP TestCase with url_open and Chrome headless helpers."
msgstr ""

#: odoo.tests.common.HttpCase.phantom_js:1 of
msgid ""
"Test js code running in the browser - optionnally log as 'login' - load "
"page given by url_path - wait for ready object to be available - "
"eval(code) inside the page"
msgstr ""

#: odoo.tests.common.HttpCase.phantom_js:7 of
msgid "To signal success test do: console.log('test successful')"
msgstr ""

#: odoo.tests.common.HttpCase.phantom_js:10 of
msgid "To signal failure do: console.error('test failed')"
msgstr ""

#: odoo.tests.common.HttpCase.phantom_js:13 of
msgid "If neither are done before timeout test fails."
msgstr ""

#: odoo.tests.common.tagged:1 of
msgid ""
"A decorator to tag BaseCase objects Tags are stored in a set that can be "
"accessed from a 'test_tags' attribute A tag prefixed by '-' will remove "
"the tag e.g. to remove the 'standard' tag By default, all Test classes "
"from odoo.tests.common have a test_tags attribute that defaults to "
"'standard' and also the module technical name When using class "
"inheritance, the tags are NOT inherited."
msgstr ""

#: ../../reference/testing.rst:63
msgid ""
"By default, tests are run once right after the corresponding module has "
"been installed. Test cases can also be configured to run after all "
"modules have been installed, and not run right after the module "
"installation:"
msgstr ""

#: odoo.tests.common.at_install:1 of
msgid ""
"Sets the at-install state of a test, the flag is a boolean specifying "
"whether the test should (``True``) or should not (``False``) run during "
"module installation."
msgstr ""

#: odoo.tests.common.at_install:5 of
msgid ""
"By default, tests are run right after installing the module, before "
"starting the installation of the next module."
msgstr ""

#: odoo.tests.common.at_install:10 of
msgid ""
"``at_install`` is now a flag, you can use :func:`tagged` to add/remove "
"it, although ``tagged`` only works on test classes"
msgstr ""

#: odoo.tests.common.post_install:1 of
msgid ""
"Sets the post-install state of a test. The flag is a boolean specifying "
"whether the test should or should not run after a set of module "
"installations."
msgstr ""

#: odoo.tests.common.post_install:5 of
msgid ""
"By default, tests are *not* run after installation of all modules in the "
"current installation set."
msgstr ""

#: odoo.tests.common.post_install:10 of
msgid ""
"``post_install`` is now a flag, you can use :func:`tagged` to add/remove "
"it, although ``tagged`` only works on test classes"
msgstr ""

#: ../../reference/testing.rst:71
msgid ""
"The most common situation is to use "
":class:`~odoo.tests.common.TransactionCase` and test a property of a "
"model in each method::"
msgstr ""

#: ../../reference/testing.rst:87
msgid "Test methods must start with ``test_``"
msgstr ""

#: odoo.tests.common.Form:1 of
msgid "Server-side form view implementation (partial)"
msgstr ""

#: odoo.tests.common.Form:3 of
msgid ""
"Implements much of the \"form view\" manipulation flow, such that server-"
"side tests can more properly reflect the behaviour which would be "
"observed when manipulating the interface:"
msgstr ""

#: odoo.tests.common.Form:7 of
msgid "call default_get and the relevant onchanges on \"creation\""
msgstr ""

#: odoo.tests.common.Form:8 of
msgid "call the relevant onchanges on setting fields"
msgstr ""

#: odoo.tests.common.Form:9 of
msgid "properly handle defaults & onchanges around x2many fields"
msgstr ""

#: odoo.tests.common.Form:11 of
msgid "Saving the form returns the created record if in creation mode."
msgstr ""

#: odoo.tests.common.Form:13 of
msgid ""
"Regular fields can just be assigned directly to the form, for "
":class:`~odoo.fields.Many2one` fields assign a singleton recordset::"
msgstr ""

#: odoo.tests.common.Form:21 of
msgid ""
"When editing a record, using the form as a context manager to "
"automatically save it at the end of the scope::"
msgstr ""

#: odoo.tests.common.Form:28 of
msgid ""
"For :class:`~odoo.fields.Many2many` fields, the field itself is a "
":class:`~odoo.tests.common.M2MProxy` and can be altered by adding or "
"removing records::"
msgstr ""

#: odoo.tests.common.Form:36 of
msgid ""
"Finally :class:`~odoo.fields.One2many` are reified as "
":class:`~odoo.tests.common.O2MProxy`."
msgstr ""

#: odoo.tests.common.Form:39 of
msgid ""
"Because the :class:`~odoo.fields.One2many` only exists through its "
"parent, it is manipulated more directly by creating \"sub-forms\" with "
"the :meth:`~odoo.tests.common.O2MProxy.new` and "
":meth:`~odoo.tests.common.O2MProxy.edit` methods. These would normally be"
" used as context managers since they get saved in the parent record::"
msgstr ""

#: odoo.tests.common.Form:60 of
msgid ""
"empty or singleton recordset. An empty recordset will put the view in "
"\"creation\" mode and trigger calls to default_get and on-load onchanges,"
" a singleton will put it in \"edit\" mode and only load the view's data."
msgstr ""

#: odoo.tests.common.Form:65 of
msgid ""
"the id, xmlid or actual view object to use for onchanges and view "
"constraints. If none is provided, simply loads the default view for the "
"model."
msgstr ""

#: odoo.tests.common.Form.save:1 of
msgid "Saves the form, returns the created record if applicable"
msgstr ""

#: odoo.tests.common.Form.save:3 of
msgid "does not save ``readonly`` fields"
msgstr ""

#: odoo.tests.common.Form.save:4 of
msgid ""
"does not save unmodified fields (during edition) — any assignment or "
"onchange return marks the field as modified, even if set to its current "
"value"
msgstr ""

#: odoo.tests.common.Form.save odoo.tests.common.O2MProxy.edit
#: odoo.tests.common.O2MProxy.new odoo.tests.common.O2MProxy.remove of
msgid "Исключение"
msgstr ""

#: odoo.tests.common.Form.save:8 of
msgid "if the form has any unfilled required field"
msgstr ""

#: odoo.tests.common.M2MProxy:1 of
msgid ""
"Behaves as a :class:`~collection.Sequence` of recordsets, can be indexed "
"or sliced to get actual underlying recordsets."
msgstr ""

#: odoo.tests.common.M2MProxy.add:1 of
msgid "Adds ``record`` to the field, the record must already exist."
msgstr ""

#: odoo.tests.common.M2MProxy.add:3 of
msgid "The addition will only be finalized when the parent record is saved."
msgstr ""

#: odoo.tests.common.M2MProxy.clear:1 of
msgid "Removes all existing records in the m2m"
msgstr ""

#: odoo.tests.common.M2MProxy.remove:1 of
msgid "Removes a record at a certain index or with a provided id from the field."
msgstr ""

#: odoo.tests.common.O2MProxy.edit:1 of
msgid ""
"Returns a :class:`Form` to edit the pre-existing "
":class:`~odoo.fields.One2many` record."
msgstr ""

#: odoo.tests.common.O2MProxy.edit:4 odoo.tests.common.O2MProxy.new:4 of
msgid ""
"The form is created from the list view if editable, or the field's form "
"view otherwise."
msgstr ""

#: odoo.tests.common.O2MProxy.edit:7 odoo.tests.common.O2MProxy.new:7
#: odoo.tests.common.O2MProxy.remove:3 of
msgid "if the field is not editable"
msgstr ""

#: odoo.tests.common.O2MProxy.new:1 of
msgid ""
"Returns a :class:`Form` for a new :class:`~odoo.fields.One2many` record, "
"properly initialised."
msgstr ""

#: odoo.tests.common.O2MProxy.remove:1 of
msgid "Removes the record at ``index`` from the parent form."
msgstr ""

#: ../../reference/testing.rst:99
msgid "Running tests"
msgstr ""

#: ../../reference/testing.rst:101
msgid ""
"Tests are automatically run when installing or updating modules if "
":option:`--test-enable <odoo-bin --test-enable>` was enabled when "
"starting the Odoo server."
msgstr ""

#: ../../reference/testing.rst:108
msgid "Test selection"
msgstr ""

#: ../../reference/testing.rst:110
msgid ""
"In Odoo, Python tests can be tagged to facilitate the test selection when"
" running tests."
msgstr ""

#: ../../reference/testing.rst:113
msgid ""
"Subclasses of :class:`odoo.tests.common.BaseCase` (usually through "
":class:`~odoo.tests.common.TransactionCase`, "
":class:`~odoo.tests.common.SavepointCase` or "
":class:`~odoo.tests.common.HttpCase`) are automatically tagged with "
"``standard``, ``at_install`` and their source module's name by default."
msgstr ""

#: ../../reference/testing.rst:120
msgid "Invocation"
msgstr ""

#: ../../reference/testing.rst:122
msgid ""
":option:`--test-tags <odoo-bin --test-tags>` can be used to select/filter"
" tests to run on the command-line."
msgstr ""

#: ../../reference/testing.rst:125
msgid ""
"This option defaults to ``+standard`` meaning tests tagged ``standard`` "
"(explicitly or implicitly) will be run by default when starting Odoo with"
" :option:`--test-enable <odoo-bin --test-enable>`."
msgstr ""

#: ../../reference/testing.rst:129
msgid ""
"When writing tests, the :func:`~odoo.tests.common.tagged` decorator can "
"be used on **test classes** to add or remove tags."
msgstr ""

#: ../../reference/testing.rst:132
msgid "The decorator's arguments are tag names, as strings."
msgstr ""

#: ../../reference/testing.rst:134
msgid ""
":func:`~odoo.tests.common.tagged` is a class decorator, it has no effect "
"on functions or methods"
msgstr ""

#: ../../reference/testing.rst:137
msgid ""
"Tags can be prefixed with the minus (``-``) sign, to *remove* them "
"instead of add or select them e.g. if you don't want your test to be "
"executed by default you can remove the ``standard`` tag:"
msgstr ""

#: ../../reference/testing.rst:149
msgid ""
"This test will not be selected by default, to run it the relevant tag "
"will have to be selected explicitely:"
msgstr ""

#: ../../reference/testing.rst:156
msgid ""
"Note that only the tests tagged ``nice`` are going to be executed. To run"
" *both* ``nice`` and ``standard`` tests, provide multiple values to "
":option:`--test-tags <odoo-bin --test-tags>`: on the command-line, values"
" are *additive* (you're selecting all tests with *any* of the specified "
"tags)"
msgstr ""

#: ../../reference/testing.rst:165
msgid ""
"The config switch parameter also accepts the ``+`` and ``-`` prefixes. "
"The ``+`` prefix is implied and therefore, totaly optional. The ``-`` "
"(minus) prefix is made to deselect tests tagged with the prefixed tags, "
"even if they are selected by other specified tags e.g. if there are "
"``standard`` tests which are also tagged as ``slow`` you can run all "
"standard tests *except* the slow ones:"
msgstr ""

#: ../../reference/testing.rst:176
msgid ""
"When you write a test that does not inherit from the "
":class:`~odoo.tests.common.BaseCase`, this test will not have the default"
" tags, you have to add them explicitely to have the test included in the "
"default test suite.  This is a common issue when using a simple "
"``unittest.TestCase`` as they're not going to get run:"
msgstr ""

#: ../../reference/testing.rst:192
msgid "Special tags"
msgstr ""

#: ../../reference/testing.rst:194
msgid ""
"``standard``: All Odoo tests that inherit from "
":class:`~odoo.tests.common.BaseCase` are implicitely tagged standard. "
":option:`--test-tags <odoo-bin --test-tags>` also defaults to "
"``standard``."
msgstr ""

#: ../../reference/testing.rst:198
msgid ""
"That means untagged test will be executed by default when tests are "
"enabled."
msgstr ""

#: ../../reference/testing.rst:199
msgid ""
"``at_install``: Means that the test will be executed right after the "
"module installation and before other modules are installed. This is a "
"default implicit tag."
msgstr ""

#: ../../reference/testing.rst:202
msgid ""
"``post_install``: Means that the test will be executed after all the "
"modules are installed. This is what you want for HttpCase tests most of "
"the time."
msgstr ""

#: ../../reference/testing.rst:205
msgid ""
"Note that this is *not exclusive* with ``at_install``, however since you "
"will generally not want both ``post_install`` is usually paired with "
"``-at_install`` when tagging a test class."
msgstr ""

#: ../../reference/testing.rst:208
msgid ""
"*module_name*: Odoo tests classes extending "
":class:`~odoo.tests.common.BaseCase` are implicitely tagged with the "
"technical name of their module. This allows easily selecting or excluding"
" specific modules when testing e.g. if you want to only run tests from "
"``stock_account``:"
msgstr ""

#: ../../reference/testing.rst:219
msgid "Examples"
msgstr ""

#: ../../reference/testing.rst:223
msgid ""
"Tests will be executed only in the installed or updated modules.  So "
"modules have to be selected with the :option:`-u <odoo-bin -u>` or "
":option:`-i <odoo-bin -i>` switches.  For simplicity, those switches are "
"not specified in the examples below."
msgstr ""

#: ../../reference/testing.rst:228
msgid "Run only the tests from the sale module:"
msgstr ""

#: ../../reference/testing.rst:234
msgid "Run the tests from the sale module but not the ones tagged as slow:"
msgstr ""

#: ../../reference/testing.rst:240
msgid "Run only the tests from stock or tagged as slow:"
msgstr ""

#: ../../reference/testing.rst:246
msgid "``-standard`` is implicit (not required), and present for clarity"
msgstr ""

#: ../../reference/testing.rst:249
msgid "Testing JS code"
msgstr ""

#: ../../reference/testing.rst:251
msgid ""
"Testing a complex system is an important safeguard to prevent regressions"
" and to guarantee that some basic functionality still works. Since Odoo "
"has a non trivial codebase in Javascript, it is necessary to test it. In "
"this section, we will discuss the practice of testing JS code in "
"isolation: these tests stay in the browser, and are not supposed to reach"
" the server."
msgstr ""

#: ../../reference/testing.rst:258
msgid "Qunit test suite"
msgstr ""

#: ../../reference/testing.rst:260
msgid ""
"The Odoo framework uses the QUnit_ library testing framework as a test "
"runner. QUnit defines the concepts of *tests* and *modules* (a set of "
"related tests), and gives us a web based interface to execute the tests."
msgstr ""

#: ../../reference/testing.rst:264
msgid "For example, here is what a pyUtils test could look like:"
msgstr ""

#: ../../reference/testing.rst:279
msgid ""
"The main way to run the test suite is to have a running Odoo server, then"
" navigate a web browser to ``/web/tests``.  The test suite will then be "
"executed by the web browser Javascript engine."
msgstr ""

#: ../../reference/testing.rst:286
msgid ""
"The web UI has many useful features: it can run only some submodules, or "
"filter tests that match a string. It can show every assertions, failed or"
" passed, rerun specific tests, ..."
msgstr ""

#: ../../reference/testing.rst:292
msgid "While the test suite is running, make sure that:"
msgstr ""

#: ../../reference/testing.rst:294
msgid "your browser window is focused,"
msgstr ""

#: ../../reference/testing.rst:295
msgid "it is not zoomed in/out. It needs to have exactly 100% zoom level."
msgstr ""

#: ../../reference/testing.rst:297
msgid ""
"If this is not the case, some tests will fail, without a proper "
"explanation."
msgstr ""

#: ../../reference/testing.rst:300
msgid "Testing Infrastructure"
msgstr ""

#: ../../reference/testing.rst:302
msgid ""
"Here is a high level overview of the most important parts of the testing "
"infrastructure:"
msgstr ""

#: ../../reference/testing.rst:305
msgid ""
"there is an asset bundle named `web.js_tests_assets`_.  This bundle "
"contains the main code (assets common + assets backend), some libraries, "
"the QUnit test runner, and some additional helper code"
msgstr ""

#: ../../reference/testing.rst:309
msgid ""
"another asset bundle, `web.qunit_suite`_, contains all the tests (and the"
" js_tests_assets code).  Almost all the test files should be added to "
"this bundle"
msgstr ""

#: ../../reference/testing.rst:313
msgid ""
"there is a `controller`_ in web, mapped to the route */web/tests*. This "
"controller simply renders the *web.qunit_suite* template."
msgstr ""

#: ../../reference/testing.rst:316
msgid ""
"to execute the tests, one can simply point its browser to the route "
"*/web/tests*. In that case, the browser will download all assets, and "
"QUnit will take over."
msgstr ""

#: ../../reference/testing.rst:319
msgid ""
"there is some code in `qunit_config.js`_ which logs in the console some "
"information when a test passes or fails."
msgstr ""

#: ../../reference/testing.rst:322
msgid ""
"we want the runbot to also run these tests, so there is a test (in "
"`test_js.py`_) which simply spawns a browser and points it to the "
"*web/tests* url.  Note that the phantom_js method does not spawn "
"phantom_js, but Chrome headless instead."
msgstr ""

#: ../../reference/testing.rst:328
msgid "Modularity and testing"
msgstr ""

#: ../../reference/testing.rst:330
msgid ""
"With the way Odoo is designed, any addon can modify the behaviour of "
"other parts of the system.  For example, the *voip* addon can modify the "
"*FieldPhone* widget to use extra features.  This is not really good from "
"the perspective of the testing system, since this means that a test in "
"the addon web will fail whenever the voip addon is installed (note that "
"the runbot runs the tests with all addons installed)."
msgstr ""

#: ../../reference/testing.rst:337
msgid ""
"At the same time, our testing sytem is good, because it can detect "
"whenever another module breaks some core functionality.  There is no "
"complete solution to this issue.  For now, we solve this on a case by "
"case basis."
msgstr ""

#: ../../reference/testing.rst:341
msgid ""
"Usually, it is not a good idea to modify some other behaviour.  For our "
"voip example, it is certainly cleaner to add a new *FieldVOIPPhone* "
"widget and modify the few views that needs it.  This way, the "
"*FieldPhone* widget is not impacted, and both can be tested."
msgstr ""

#: ../../reference/testing.rst:347
msgid "Adding a new test case"
msgstr ""

#: ../../reference/testing.rst:349
msgid ""
"Let us assume that we are maintaining an addon *my_addon*, and that we "
"want to add a test for some javascript code (for example, some utility "
"function myFunction, located in *my_addon.utils*). The process to add a "
"new test case is the following:"
msgstr ""

#: ../../reference/testing.rst:354
msgid ""
"create a new file *my_addon/static/tests/utils_tests.js*. This file "
"contains the basic code to add a QUnit module *my_addon > utils*."
msgstr ""

#: ../../reference/testing.rst:372
msgid "In *my_addon/assets.xml*, add the file to the main test assets:"
msgstr ""

#: ../../reference/testing.rst:385
msgid ""
"Restart the server and update *my_addon*, or do it from the interface (to"
" make sure the new test file is loaded)"
msgstr ""

#: ../../reference/testing.rst:388
msgid "Add a test case after the definition of the *utils* sub test suite:"
msgstr ""

#: ../../reference/testing.rst:399
msgid "Visit */web/tests/* to make sure the test is executed"
msgstr ""

#: ../../reference/testing.rst:402
msgid "Helper functions and specialized assertions"
msgstr ""

#: ../../reference/testing.rst:404
msgid ""
"Without help, it is quite difficult to test some parts of Odoo. In "
"particular, views are tricky, because they communicate with the server "
"and may perform many rpcs, which needs to be mocked.  This is why we "
"developed some specialized helper functions, located in `test_utils.js`_."
msgstr ""

#: ../../reference/testing.rst:409
msgid ""
"Mock test functions: these functions help setting up a test environment. "
"The most important use case is mocking the answers given by the Odoo "
"server. These functions use a `mock server`_. This is a javascript class "
"that simulates answers to the most common model methods: read, "
"search_read, nameget, ..."
msgstr ""

#: ../../reference/testing.rst:414
msgid ""
"DOM helpers: useful to simulate events/actions on some specific target. "
"For example, testUtils.dom.click performs a click on a target.  Note that"
" it is safer than doing it manually, because it also checks that the "
"target exists, and is visible."
msgstr ""

#: ../../reference/testing.rst:419
msgid ""
"create helpers: they are probably the most important functions exported "
"by `test_utils.js`_.  These helpers are useful to create a widget, with a"
" mock environment, and a lot of small detail to simulate as much as "
"possible the real conditions.  The most important is certainly "
"`createView`_."
msgstr ""

#: ../../reference/testing.rst:424
msgid ""
"`qunit assertions`_: QUnit can be extended with specialized assertions. "
"For Odoo, we frequently test some DOM properties. This is why we made "
"some assertions to help with that.  For example, the *containsOnce* "
"assertion takes a widget/jQuery/HtmlElement and a selector, then checks "
"if the target contains exactly one match for the css selector."
msgstr ""

#: ../../reference/testing.rst:430
msgid ""
"For example, with these helpers, here is what a simple form test could "
"look like:"
msgstr ""

#: ../../reference/testing.rst:454
msgid ""
"Notice the use of the testUtils.createView helper and of the containsOnce"
" assertion.  Also, the form controller was properly destroyed at the end "
"of the test."
msgstr ""

#: ../../reference/testing.rst:459
msgid "Best Practices"
msgstr ""

#: ../../reference/testing.rst:461
msgid "In no particular order:"
msgstr ""

#: ../../reference/testing.rst:463
msgid "all test files should be added in *some_addon/static/tests/*"
msgstr ""

#: ../../reference/testing.rst:464
msgid ""
"for bug fixes, make sure that the test fails without the bug fix, and "
"passes with it.  This ensures that it actually works."
msgstr ""

#: ../../reference/testing.rst:466
msgid "try to have the minimal amount of code necessary for the test to work."
msgstr ""

#: ../../reference/testing.rst:467
msgid ""
"usually, two small tests are better than one large test.  A smaller test "
"is easier to understand and to fix."
msgstr ""

#: ../../reference/testing.rst:469
msgid ""
"always cleanup after a test.  For example, if your test instantiates a "
"widget, it should destroy it at the end."
msgstr ""

#: ../../reference/testing.rst:471
msgid ""
"no need to have full and complete code coverage.  But adding a few tests "
"helps a lot: it makes sure that your code is not completely broken, and "
"whenever a bug is fixed, it is really much easier to add a test to an "
"existing test suite."
msgstr ""

#: ../../reference/testing.rst:474
msgid ""
"if you want to check some negative assertion (for example, that a "
"HtmlElement does not have a specific css class), then try to add the "
"positive assertion in the same test (for example, by doing an action that"
" changes the state). This will help avoid the test to become dead in the "
"future (for example, if the css class is changed)."
msgstr ""

#: ../../reference/testing.rst:481
msgid "Tips"
msgstr ""

#: ../../reference/testing.rst:483
msgid ""
"running only one test: you can (temporarily!) change the "
"*QUnit.test(...)* definition into *QUnit.only(...)*.  This is useful to "
"make sure that QUnit only runs this specific test."
msgstr ""

#: ../../reference/testing.rst:486
msgid ""
"debug flag: most create utility functions have a debug mode (activated by"
" the debug: true parameter).  In that case, the target widget will be put"
" in the DOM instead of the hidden qunit specific fixture, and more "
"information will be logged. For example, all mocked network "
"communications will be available in the console."
msgstr ""

#: ../../reference/testing.rst:491
msgid ""
"when working on a failing test, it is common to add the debug flag, then "
"comment the end of the test (in particular, the destroy call).  With "
"this, it is possible to see the state of the widget directly, and even "
"better, to manipulate the widget by clicking/interacting with it."
msgstr ""

#: ../../reference/testing.rst:498
msgid "Integration Testing"
msgstr ""

#: ../../reference/testing.rst:500
msgid ""
"Testing Python code and JS code separately is very useful, but it does "
"not prove that the web client and the server work together.  In order to "
"do that, we can write another kind of test: tours.  A tour is a mini "
"scenario of some interesting business flow.  It explains a sequence of "
"steps that should be followed.  The test runner will then create a "
"phantom_js browser, point it to the proper url and simulate the click and"
" inputs, according to the scenario."
msgstr ""

#: ../../reference/testing.rst:508
msgid "Screenshots and screencasts during browser_js tests"
msgstr ""

#: ../../reference/testing.rst:510
msgid ""
"When running tests that use HttpCase.browser_js from the command line, "
"the Chrome browser is used in headless mode. By default, if a test fails,"
" a PNG screenshot is taken at the moment of the failure and written in"
msgstr ""

#: ../../reference/testing.rst:518
msgid ""
"Two new command line arguments were added since Odoo 13.0 to control this"
" behavior: :option:`--screenshots <odoo-bin --screenshots>` and "
":option:`--screencasts <odoo-bin --screencasts>`"
msgstr ""

