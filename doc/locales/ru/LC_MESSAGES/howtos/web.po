# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo 13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-07 15:02+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../howtos/web.rst:5
msgid "Customizing the web client"
msgstr "Настройка веб-клиента"

#: ../../howtos/web.rst:7
msgid ""
"Note: this section is really really out of date. It will be updated someday,"
" but meanwhile, this tutorial will probably be frustrating to follow, since "
"it was written a long time ago."
msgstr ""
"Примечание: этот раздел действительно устарел. Когда-нибудь он будет "
"обновлен, но, тем не менее, этот учебник, вероятно, будет разочаровывать, "
"поскольку он был написан очень давно."

#: ../../howtos/web.rst:16
msgid "This guide is about creating modules for Odoo's web client."
msgstr "Это руководство о создании модулей для веб-клиента Odoo."

#: ../../howtos/web.rst:18
msgid ""
"To create websites with Odoo, see :doc:`website`; to add business "
"capabilities or extend existing business systems of Odoo, see "
":doc:`backend`."
msgstr ""
"Чтобы создать сайты с помощью Odoo, смотрите: doc: `website`; чтобы добавить"
" бизнес-возможности или расширить существующие бизнес-системы Odoo, "
"смотрите: doc: `backend`."

#: ../../howtos/web.rst:23
msgid "This guide assumes knowledge of:"
msgstr "Это руководство предполагает знание:"

#: ../../howtos/web.rst:25
msgid "Javascript basics and good practices"
msgstr "Основы Javascript и хорошие практики"

#: ../../howtos/web.rst:26
msgid "jQuery_"
msgstr "jQuery_"

#: ../../howtos/web.rst:27
msgid "`Underscore.js`_"
msgstr "`Underscore.js`_"

#: ../../howtos/web.rst:29
msgid "It also requires :ref:`an installed Odoo <setup/install>`, and Git_."
msgstr "Также требуется: ref: `установленный Odoo <setup/install> `и Git_."

#: ../../howtos/web.rst:33
msgid "A Simple Module"
msgstr "Простой модуль"

#: ../../howtos/web.rst:35
msgid ""
"Let's start with a simple Odoo module holding basic web component "
"configuration and letting us test the web framework."
msgstr ""
"Давайте начнем с простого модуля Odoo, который содержит базовую конфигурацию"
" веб-компонента и позволяет нам тестировать веб-фреймворк."

#: ../../howtos/web.rst:38
msgid ""
"The example module is available online and can be downloaded using the "
"following command:"
msgstr ""
"Пример модуля доступен онлайн и может быть загружен с помощью следующей "
"команды:"

#: ../../howtos/web.rst:45
msgid ""
"This will create a ``petstore`` folder wherever you executed the command. "
"You then need to add that folder to Odoo's :option:`addons path <odoo-bin "
"--addons-path>`, create a new database and install the ``oepetstore`` "
"module."
msgstr ""
"Это создаст папку `` petstore``, где бы вы ни выполняли команду. Затем вам "
"нужно добавить эту папку в путь Odoo: option: `addons <odoo-bin --addons-"
"path> `, создайте новую базу данных и установите модуль` `oepetstore``."

#: ../../howtos/web.rst:50
msgid ""
"If you browse the ``petstore`` folder, you should see the following content:"
msgstr ""
"Если вы просматриваете папку `` petstore``, вы должны увидеть следующее "
"содержимое:"

#: ../../howtos/web.rst:76
msgid ""
"The module already holds various server customizations. We'll come back to "
"these later, for now let's focus on the web-related content, in the "
"``static`` folder."
msgstr ""
"Модуль уже содержит различные настройки сервера. Мы вернемся к ним позже, а "
"сейчас давайте сосредоточимся на веб-контенте в папке `` static``."

#: ../../howtos/web.rst:80
msgid ""
"Files used in the \"web\" side of an Odoo module must be placed in a "
"``static`` folder so they are available to a web browser, files outside that"
" folder can not be fetched by browsers. The ``src/css``, ``src/js`` and "
"``src/xml`` sub-folders are conventional and not strictly necessary."
msgstr ""
"Файлы, используемые на «веб» стороне модуля Odoo, должны быть помещены в "
"«статическую» папку, чтобы они были доступны для веб-браузера, файлы за "
"пределами этой папки не могут быть извлечены браузерами. Подпапки `` src / "
"css``, `` src / js`` и `` src / xml`` являются стандартными и не являются "
"строго необходимыми."

#: ../../howtos/web.rst:85
msgid "``oepetstore/static/css/petstore.css``"
msgstr "`` Oepetstore / статический / CSS / petstore.css``"

#: ../../howtos/web.rst:86
msgid "Currently empty, will hold the CSS_ for pet store content"
msgstr ""
"В настоящее время пусто, будет содержать CSS_ для содержимого зоомагазина"

#: ../../howtos/web.rst:87
msgid "``oepetstore/static/xml/petstore.xml``"
msgstr "`` Oepetstore / статический / XML / petstore.xml``"

#: ../../howtos/web.rst:88
msgid "Mostly empty, will hold :ref:`reference/qweb` templates"
msgstr "В основном пустой, будет содержать шаблоны: ref: `reference / qweb`"

#: ../../howtos/web.rst:107
msgid "``oepetstore/static/js/petstore.js``"
msgstr "`` Oepetstore / статический / JS / petstore.js``"

#: ../../howtos/web.rst:90
msgid ""
"The most important (and interesting) part, contains the logic of the "
"application (or at least its web-browser side) as javascript. It should "
"currently look like::"
msgstr ""
"Самая важная (и интересная) часть содержит логику приложения (или, по "
"крайней мере, его веб-браузера) в виде javascript. В настоящее время он "
"должен выглядеть так:"

#: ../../howtos/web.rst:109
msgid "Which only prints a small message in the browser's console."
msgstr "Который только печатает небольшое сообщение в консоли браузера."

#: ../../howtos/web.rst:111
msgid ""
"The files in the ``static`` folder, need to be defined within the module in "
"order for them to be loaded correctly. Everything in ``src/xml`` is defined "
"in ``__manifest__.py`` while the contents of ``src/css`` and ``src/js`` are "
"defined in ``petstore.xml``, or a similar file."
msgstr ""
"Файлы в папке `` static`` должны быть определены в модуле для их правильной "
"загрузки. Все в `` src / xml`` определено в `` __manifest __. Py``, а "
"содержимое `` src / css`` и `` src / js`` определено в `` petstore.xml``, "
"или похожий файл."

#: ../../howtos/web.rst:115
msgid ""
"All JavaScript files are concatenated and :term:`minified` to improve "
"application load time."
msgstr ""
"Все файлы JavaScript объединяются и: term: `minified` для улучшения времени "
"загрузки приложения."

#: ../../howtos/web.rst:118
msgid ""
"One of the drawback is debugging becomes more difficult as individual files "
"disappear and the code is made significantly less readable. It is possible "
"to disable this process by enabling the \"developer mode\": log into your "
"Odoo instance (user *admin* password *admin* by default) open the user menu "
"(in the top-right corner of the Odoo screen) and select :guilabel:`About "
"Odoo` then :guilabel:`Activate the developer mode`:"
msgstr ""
"Одним из недостатков является то, что отладка становится более сложной, так "
"как отдельные файлы исчезают, а код становится значительно менее читаемым. "
"Этот процесс можно отключить, включив «режим разработчика»: войдите в свой "
"экземпляр Odoo (по умолчанию пользователь * admin * пароль * admin *), "
"откройте меню пользователя (в правом верхнем углу экрана Odoo) и выберите : "
"guilabel: `О Odoo` тогда: guilabel:` Активируйте режим разработчика`:"

#: ../../howtos/web.rst:132
msgid ""
"This will reload the web client with optimizations disabled, making "
"development and debugging significantly more comfortable."
msgstr ""
"Это перезагрузит веб-клиент с отключенными оптимизациями, что значительно "
"облегчит разработку и отладку."

#: ../../howtos/web.rst:138
msgid "Odoo JavaScript Module"
msgstr "Модуль JavaScript Odoo"

#: ../../howtos/web.rst:140
msgid ""
"Javascript doesn't have built-in modules. As a result variables defined in "
"different files are all mashed together and may conflict. This has given "
"rise to various module patterns used to build clean namespaces and limit "
"risks of naming conflicts."
msgstr ""
"Javascript не имеет встроенных модулей. В результате все переменные, "
"определенные в разных файлах, объединяются и могут конфликтовать. Это "
"привело к появлению различных шаблонов модулей, используемых для создания "
"чистых пространств имен и ограничения рисков конфликтов имен."

#: ../../howtos/web.rst:145
msgid ""
"The Odoo framework uses one such pattern to define modules within web "
"addons, in order to both namespace code and correctly order its loading."
msgstr ""
"Инфраструктура Odoo использует один такой шаблон для определения модулей в "
"веб-аддонах, чтобы как код пространства имен, так и правильно упорядочить "
"его загрузку."

#: ../../howtos/web.rst:148
msgid "``oepetstore/static/js/petstore.js`` contains a module declaration::"
msgstr ""
"`` oepetstore / static / js / petstore.js`` содержит объявление модуля ::"

#: ../../howtos/web.rst:154
msgid ""
"In Odoo web, modules are declared as functions set on the global ``odoo`` "
"variable. The function's name must be the same as the addon (in this case "
"``oepetstore``) so the framework can find it, and automatically initialize "
"it."
msgstr ""
"В сети Odoo модули объявляются как функции, установленные в глобальной "
"переменной `` odoo``. Имя функции должно совпадать с надстройкой (в данном "
"случае `` oepetstore``), чтобы инфраструктура могла найти ее и автоматически"
" инициализировать."

#: ../../howtos/web.rst:158
msgid ""
"When the web client loads your module it will call the root function and "
"provide two parameters:"
msgstr ""
"Когда веб-клиент загружает ваш модуль, он вызывает корневую функцию и "
"предоставляет два параметра:"

#: ../../howtos/web.rst:161
msgid ""
"the first parameter is the current instance of the Odoo web client, it gives"
" access to various capabilities defined by the Odoo (translations, network "
"services) as well as objects defined by the core or by other modules."
msgstr ""
"Первый параметр - это текущий экземпляр веб-клиента Odoo, он предоставляет "
"доступ к различным возможностям, определенным Odoo (переводы, сетевые "
"сервисы), а также к объектам, определенным ядром или другими модулями."

#: ../../howtos/web.rst:165
msgid ""
"the second parameter is your own local namespace automatically created by "
"the web client. Objects and variables which should be accessible from "
"outside your module (either because the Odoo web client needs to call them "
"or because others may want to customize them) should be set inside that "
"namespace."
msgstr ""
"второй параметр - это ваше собственное локальное пространство имен, "
"автоматически создаваемое веб-клиентом. Объекты и переменные, которые должны"
" быть доступны извне вашего модуля (либо потому, что веб-клиент Odoo должен "
"вызывать их, либо потому, что другие могут захотеть настроить их), должны "
"быть установлены внутри этого пространства имен."

#: ../../howtos/web.rst:172
msgid "Classes"
msgstr "Классы"

#: ../../howtos/web.rst:174
msgid ""
"Much as modules, and contrary to most object-oriented languages, javascript "
"does not build in *classes*\\ [#classes]_ although it provides roughly "
"equivalent (if lower-level and more verbose) mechanisms."
msgstr ""
"Во многом как модули и в отличие от большинства объектно-ориентированных "
"языков, javascript не встраивает * классы * \\ [#classes] _, хотя он "
"обеспечивает примерно эквивалентные (если более низкоуровневые и более "
"подробные) механизмы."

#: ../../howtos/web.rst:178
msgid ""
"For simplicity and developer-friendliness Odoo web provides a class system "
"based on John Resig's `Simple JavaScript Inheritance`_."
msgstr ""
"Для простоты и дружелюбия к разработчикам Odoo web предлагает систему "
"классов, основанную на «Простом наследовании JavaScript» Джона Резига."

#: ../../howtos/web.rst:181
msgid ""
"New classes are defined by calling the :func:`~odoo.web.Class.extend` method"
" of :class:`odoo.web.Class`::"
msgstr ""
"Новые классы определяются путем вызова метода: func: `~ "
"odoo.web.Class.extend`: class:` odoo.web.Class` ::"

#: ../../howtos/web.rst:190
msgid ""
"The :func:`~odoo.web.Class.extend` method takes a dictionary describing the "
"new class's content (methods and static attributes). In this case, it will "
"only have a ``say_hello`` method which takes no parameters."
msgstr ""
"Метод: func: `~ odoo.web.Class.extend` принимает словарь, описывающий "
"содержимое нового класса (методы и статические атрибуты). В этом случае у "
"него будет только метод `` say_hello``, который не принимает параметров."

#: ../../howtos/web.rst:194
msgid "Classes are instantiated using the ``new`` operator::"
msgstr "Классы создаются с использованием оператора `` new`` ::"

#: ../../howtos/web.rst:200
msgid "And attributes of the instance can be accessed via ``this``::"
msgstr "А к атрибутам экземпляра можно получить доступ через `` this`` ::"

#: ../../howtos/web.rst:213
msgid ""
"Classes can provide an initializer to perform the initial setup of the "
"instance, by defining an ``init()`` method. The initializer receives the "
"parameters passed when using the ``new`` operator::"
msgstr ""
"Классы могут предоставить инициализатор для выполнения начальной настройки "
"экземпляра, определив метод `` init () ``. Инициализатор получает параметры,"
" переданные при использовании оператора `` new`` ::"

#: ../../howtos/web.rst:230
msgid ""
"It is also possible to create subclasses from existing (used-defined) "
"classes by calling :func:`~odoo.web.Class.extend` on the parent class, as is"
" done to subclass :class:`~odoo.web.Class`::"
msgstr ""
"Также возможно создавать подклассы из существующих (используемых-"
"определенных) классов, вызывая: func: `~ odoo.web.Class.extend` в "
"родительском классе, как это делается для подкласса: class:` ~ "
"odoo.web.Class `::"

#: ../../howtos/web.rst:244
msgid ""
"When overriding a method using inheritance, you can use ``this._super()`` to"
" call the original method::"
msgstr ""
"При переопределении метода с использованием наследования вы можете "
"использовать `` this._super () `` для вызова оригинального метода ::"

#: ../../howtos/web.rst:260
msgid ""
"``_super`` is not a standard method, it is set on-the-fly to the next method"
" in the current inheritance chain, if any. It is only defined during the "
"*synchronous* part of a method call, for use in asynchronous handlers (after"
" network calls or in ``setTimeout`` callbacks) a reference to its value "
"should be retained, it should not be accessed via ``this``::"
msgstr ""
"`` _super`` не является стандартным методом, он устанавливается на лету для "
"следующего метода в текущей цепочке наследования, если таковой имеется. Он "
"определяется только во время * синхронной * части вызова метода, для "
"использования в асинхронных обработчиках (после сетевых вызовов или в `` "
"setTimeout`` обратных вызовах) ссылка на его значение должна быть сохранена,"
" к ней нельзя обращаться через `` this`` ::"

#: ../../howtos/web.rst:283
msgid "Widgets Basics"
msgstr "Основы виджетов"

#: ../../howtos/web.rst:285
msgid ""
"The Odoo web client bundles jQuery_ for easy DOM manipulation. It is useful "
"and provides a better API than standard `W3C DOM`_\\ [#dombugs]_, but "
"insufficient to structure complex applications leading to difficult "
"maintenance."
msgstr ""
"Веб-клиент Odoo связывает jQuery_ для легкой манипуляции с DOM. Он полезен и"
" предоставляет лучший API, чем стандартный `W3C DOM`_ \\ [#dombugs] _, но "
"недостаточен для структурирования сложных приложений, приводящих к сложному "
"обслуживанию."

#: ../../howtos/web.rst:290
msgid ""
"Much like object-oriented desktop UI toolkits (e.g. Qt_, Cocoa_ or GTK_), "
"Odoo Web makes specific components responsible for sections of a page. In "
"Odoo web, the base for such components is the :class:`~odoo.Widget` class, a"
" component specialized in handling a page section and displaying information"
" for the user."
msgstr ""
"Подобно объектно-ориентированным настольным инструментам пользовательского "
"интерфейса (например, Qt_, Cocoa_ или GTK_), Odoo Web делает определенные "
"компоненты ответственными за разделы страницы. В Odoo web основой для таких "
"компонентов является класс: class: `~ odoo.Widget`, компонент, "
"специализирующийся на обработке раздела страницы и отображении информации "
"для пользователя."

#: ../../howtos/web.rst:297
msgid "Your First Widget"
msgstr "Ваш первый виджет"

#: ../../howtos/web.rst:299
msgid "The initial demonstration module already provides a basic widget::"
msgstr "Начальный демонстрационный модуль уже предоставляет базовый виджет:"

#: ../../howtos/web.rst:307
msgid ""
"It extends :class:`~odoo.Widget` and overrides the standard method "
":func:`~odoo.Widget.start`, which — much like the previous ``MyClass`` — "
"does little for now."
msgstr ""
"Он расширяет: class: `~ odoo.Widget` и переопределяет стандартный метод: "
"func:` ~ odoo.Widget.start`, который - как и предыдущий `` MyClass`` - пока "
"мало что делает."

#: ../../howtos/web.rst:311
msgid "This line at the end of the file::"
msgstr "Эта строка в конце файла ::"

#: ../../howtos/web.rst:316
msgid ""
"registers our basic widget as a client action. Client actions will be "
"explained later, for now this is just what allows our widget to be called "
"and displayed when we select the :menuselection:`Pet Store --> Pet Store -->"
" Home Page` menu."
msgstr ""
"регистрирует наш основной виджет как действие клиента. Действия клиента "
"будут объяснены позже, а пока именно это позволяет нашему виджету вызываться"
" и отображаться, когда мы выбираем: menuselection: `Pet Store -&gt; Pet "
"Store -&gt; Home Page`."

#: ../../howtos/web.rst:323
msgid ""
"because the widget will be called from outside our module, the web client "
"needs its \"fully qualified\" name, not the local version."
msgstr ""
"Поскольку виджет будет вызываться извне нашего модуля, веб-клиенту нужно его"
" «полностью определенное» имя, а не локальная версия."

#: ../../howtos/web.rst:327
msgid "Display Content"
msgstr "Показать содержимое"

#: ../../howtos/web.rst:329
msgid ""
"Widgets have a number of methods and features, but the basics are simple:"
msgstr "Виджеты имеют ряд методов и функций, но основы просты:"

#: ../../howtos/web.rst:331
msgid "set up a widget"
msgstr "настроить виджет"

#: ../../howtos/web.rst:332
msgid "format the widget's data"
msgstr "отформатировать данные виджета"

#: ../../howtos/web.rst:333
msgid "display the widget"
msgstr "отобразить виджет"

#: ../../howtos/web.rst:335
msgid ""
"The ``HomePage`` widget already has a :func:`~odoo.Widget.start` method. "
"That method is part of the normal widget lifecycle and automatically called "
"once the widget is inserted in the page. We can use it to display some "
"content."
msgstr ""
"Виджет `` HomePage`` уже имеет метод: func: `~ odoo.Widget.start`. Этот "
"метод является частью обычного жизненного цикла виджета и автоматически "
"вызывается после вставки виджета на страницу. Мы можем использовать его для "
"отображения некоторого контента."

#: ../../howtos/web.rst:340
msgid ""
"All widgets have a :attr:`~odoo.Widget.$el` which represents the section of "
"page they're in charge of (as a jQuery_ object). Widget content should be "
"inserted there. By default, :attr:`~odoo.Widget.$el` is an empty ``<div>`` "
"element."
msgstr ""
"Все виджеты имеют: attr: `~ odoo.Widget. $ El`, который представляет раздел "
"страницы, за который они отвечают (как объект jQuery_). Содержимое виджета "
"должно быть вставлено туда. По умолчанию: attr: `~ odoo.Widget. $ El` "
"является пустым` ` <div> Элемент."

#: ../../howtos/web.rst:345
msgid ""
"A ``<div>`` element is usually invisible to the user if it has no content "
"(or without specific styles giving it a size) which is why nothing is "
"displayed on the page when ``HomePage`` is launched."
msgstr ""
"`` ` <div> Элемент `` обычно невидим для пользователя, если у него нет "
"содержимого (или без определенных стилей, задающих его размер), поэтому на "
"странице ничего не отображается, когда запускается `` HomePage``."

#: ../../howtos/web.rst:349
msgid "Let's add some content to the widget's root element, using jQuery::"
msgstr ""
"Давайте добавим некоторый контент в корневой элемент виджета, используя "
"jQuery ::"

#: ../../howtos/web.rst:357
msgid ""
"That message will now appear when you open :menuselection:`Pet Store --> Pet"
" Store --> Home Page`"
msgstr ""
"Это сообщение теперь появится при открытии: menuselection: `Pet Store -&gt; "
"Pet Store -&gt; Home Page`"

#: ../../howtos/web.rst:362
msgid ""
"to refresh the javascript code loaded in Odoo Web, you will need to reload "
"the page. There is no need to restart the Odoo server."
msgstr ""
"Чтобы обновить код JavaScript, загруженный в Odoo Web, вам необходимо "
"перезагрузить страницу. Нет необходимости перезагружать сервер Odoo."

#: ../../howtos/web.rst:365
msgid ""
"The ``HomePage`` widget is used by Odoo Web and managed automatically. To "
"learn how to use a widget \"from scratch\" let's create a new one::"
msgstr ""
"Виджет `` HomePage`` используется Odoo Web и управляется автоматически. "
"Чтобы узнать, как использовать виджет «с нуля», давайте создадим новый:"

#: ../../howtos/web.rst:374
msgid ""
"We can now add our ``GreetingsWidget`` to the ``HomePage`` by using the "
"``GreetingsWidget``'s :func:`~odoo.Widget.appendTo` method::"
msgstr ""
"Теперь мы можем добавить наш `` GreetingsWidget`` к `` HomePage`` с помощью "
"метода `` GreetingsWidget``: func: `~ odoo.Widget.appendTo` ::"

#: ../../howtos/web.rst:385
msgid "``HomePage`` first adds its own content to its DOM root"
msgstr ""
"`` HomePage`` сначала добавляет свой собственный контент в свой корень DOM"

#: ../../howtos/web.rst:386
msgid "``HomePage`` then instantiates ``GreetingsWidget``"
msgstr "Затем `` HomePage`` создает экземпляр `` GreetingsWidget``"

#: ../../howtos/web.rst:387
msgid ""
"Finally it tells ``GreetingsWidget`` where to insert itself, delegating part"
" of its :attr:`~odoo.Widget.$el` to the ``GreetingsWidget``."
msgstr ""
"Наконец, он сообщает `` GreetingsWidget``, куда вставлять себя, делегируя "
"часть его: attr: `~ odoo.Widget. $ El`` `GreetingsWidget``."

#: ../../howtos/web.rst:390
msgid ""
"When the :func:`~odoo.Widget.appendTo` method is called, it asks the widget "
"to insert itself at the specified position and to display its content. The "
":func:`~odoo.Widget.start` method will be called during the call to "
":func:`~odoo.Widget.appendTo`."
msgstr ""
"Когда вызывается метод: func: `~ odoo.Widget.appendTo`, он просит виджет "
"вставить себя в указанную позицию и отобразить его содержимое. Метод: func: "
"`~ odoo.Widget.start` будет вызываться во время вызова: func:` ~ "
"odoo.Widget.appendTo`."

#: ../../howtos/web.rst:395
msgid ""
"To see what happens under the displayed interface, we will use the browser's"
" DOM Explorer. But first let's alter our widgets slightly so we can more "
"easily find where they are, by :attr:`adding a class to their root elements "
"<odoo.Widget.className>`::"
msgstr ""
"Чтобы увидеть, что происходит под отображаемым интерфейсом, мы будем "
"использовать браузер DOM Explorer. Но сначала давайте немного изменим наши "
"виджеты, чтобы нам было легче находить, где они находятся, путем: attr: "
"`добавления класса к их корневым элементам <odoo.Widget.className> `::"

#: ../../howtos/web.rst:409
msgid ""
"If you can find the relevant section of the DOM (right-click on the text "
"then :guilabel:`Inspect Element`), it should look like this:"
msgstr ""
"Если вы можете найти соответствующий раздел DOM (щелкните правой кнопкой "
"мыши по тексту, затем: guilabel: `Inspect Element`), он должен выглядеть "
"следующим образом:"

#: ../../howtos/web.rst:421
msgid ""
"Which clearly shows the two ``<div>`` elements automatically created by "
":class:`~odoo.Widget`, because we added some classes on them."
msgstr ""
"Который ясно показывает два `` <div> Элементы `` автоматически создаются: "
"class: `~ odoo.Widget`, потому что мы добавили к ним несколько классов."

#: ../../howtos/web.rst:424
msgid "We can also see the two message-holding divs we added ourselves"
msgstr "Мы также можем увидеть два div-сообщения, которые мы добавили сами"

#: ../../howtos/web.rst:426
msgid ""
"Finally, note the ``<div class=\"oe_petstore_greetings\">`` element which "
"represents the ``GreetingsWidget`` instance is *inside* the ``<div "
"class=\"oe_petstore_homepage\">`` which represents the ``HomePage`` "
"instance, since we appended"
msgstr ""
"Наконец, обратите внимание на `` <div class=\"oe_petstore_greetings\"> "
"Элемент ``, который представляет экземпляр `` GreetingsWidget``, * находится"
" внутри * `` <div class=\"oe_petstore_homepage\"> `` который представляет "
"экземпляр `` HomePage``, так как мы добавили"

#: ../../howtos/web.rst:432
msgid "Widget Parents and Children"
msgstr "Виджет Родители и Дети"

#: ../../howtos/web.rst:434
msgid "In the previous part, we instantiated a widget using this syntax::"
msgstr ""
"В предыдущей части мы создали экземпляр виджета, используя следующий "
"синтаксис:"

#: ../../howtos/web.rst:438
msgid ""
"The first argument is ``this``, which in that case was a ``HomePage`` "
"instance. This tells the widget being created which other widget is its "
"*parent*."
msgstr ""
"Первый аргумент - это `` this``, который в этом случае был экземпляром `` "
"HomePage``. Это сообщает создаваемому виджету, какой другой виджет является "
"его * parent *."

#: ../../howtos/web.rst:442
msgid ""
"As we've seen, widgets are usually inserted in the DOM by another widget and"
" *inside* that other widget's root element. This means most widgets are "
"\"part\" of another widget, and exist on behalf of it. We call the container"
" the *parent*, and the contained widget the *child*."
msgstr ""
"Как мы уже видели, виджеты обычно вставляются в DOM другим виджетом и * "
"внутри * этого корневого элемента другого виджета. Это означает, что "
"большинство виджетов являются «частью» другого виджета и существуют от его "
"имени. Мы называем контейнер * parent *, а содержащийся в нем виджет * child"
" *."

#: ../../howtos/web.rst:447
msgid ""
"Due to multiple technical and conceptual reasons, it is necessary for a "
"widget to know who is its parent and who are its children."
msgstr ""
"Ввиду множества технических и концептуальных причин, виджету необходимо "
"знать, кто является его родителем, а кто - его дочерними."

#: ../../howtos/web.rst:458
msgid ":func:`~odoo.Widget.getParent`"
msgstr ": FUNC: `~ odoo.Widget.getParent`"

#: ../../howtos/web.rst:451
msgid "can be used to get the parent of a widget::"
msgstr "может быть использован для получения родителя виджета:"

#: ../../howtos/web.rst:470
msgid ":func:`~odoo.Widget.getChildren`"
msgstr ": FUNC: `~ odoo.Widget.getChildren`"

#: ../../howtos/web.rst:461
msgid "can be used to get a list of its children::"
msgstr "может быть использован для получения списка своих детей:"

#: ../../howtos/web.rst:472
msgid ""
"When overriding the :func:`~odoo.Widget.init` method of a widget it is *of "
"the utmost importance* to pass the parent to the ``this._super()`` call, "
"otherwise the relation will not be set up correctly::"
msgstr ""
"При переопределении метода: func: `~ odoo.Widget.init` крайне важно * "
"передать родительский элемент в вызов` `this._super ()` `, иначе отношение "
"не будет установлено правильно ::"

#: ../../howtos/web.rst:483
msgid ""
"Finally, if a widget does not have a parent (e.g. because it's the root "
"widget of the application), ``null`` can be provided as parent::"
msgstr ""
"Наконец, если у виджета нет родителя (например, потому что это корневой "
"виджет приложения), `` null`` может быть предоставлено как parent ::"

#: ../../howtos/web.rst:489
msgid "Destroying Widgets"
msgstr "Уничтожение виджетов"

#: ../../howtos/web.rst:491
msgid ""
"If you can display content to your users, you should also be able to erase "
"it. This is done via the :func:`~odoo.Widget.destroy` method::"
msgstr ""
"Если вы можете отображать контент для своих пользователей, вы также сможете "
"удалить его. Это делается с помощью метода: func: `~ odoo.Widget.destroy` ::"

#: ../../howtos/web.rst:496
msgid ""
"When a widget is destroyed it will first call :func:`~odoo.Widget.destroy` "
"on all its children. Then it erases itself from the DOM. If you have set up "
"permanent structures in :func:`~odoo.Widget.init` or "
":func:`~odoo.Widget.start` which must be explicitly cleaned up (because the "
"garbage collector will not handle them), you can override "
":func:`~odoo.Widget.destroy`."
msgstr ""
"Когда виджет уничтожается, он сначала вызывает: func: `~ "
"odoo.Widget.destroy` для всех своих дочерних элементов. Затем он стирает "
"себя из DOM. Если вы установили постоянные структуры в: func: `~ "
"odoo.Widget.init` или: func:` ~ odoo.Widget.start`, которые должны быть явно"
" очищены (потому что сборщик мусора не будет их обрабатывать), вы можете "
"переопределить: func: `~ odoo.Widget.destroy`."

#: ../../howtos/web.rst:505
msgid ""
"when overriding :func:`~odoo.Widget.destroy`, ``_super()`` *must always* be "
"called otherwise the widget and its children are not correctly cleaned up "
"leaving possible memory leaks and \"phantom events\", even if no error is "
"displayed"
msgstr ""
"при переопределении: func: `~ odoo.Widget.destroy`,` `_super ()` `* должны "
"всегда вызываться *, иначе виджет и его дочерние элементы очищаются "
"неправильно, оставляя возможные утечки памяти и&quot; фантомные события "
"&quot;, даже если ошибка не отображается"

#: ../../howtos/web.rst:511
msgid "The QWeb Template Engine"
msgstr "Шаблонный движок QWeb"

#: ../../howtos/web.rst:513
msgid ""
"In the previous section we added content to our widgets by directly "
"manipulating (and adding to) their DOM::"
msgstr ""
"В предыдущем разделе мы добавляли контент в наши виджеты, напрямую "
"манипулируя (и добавляя в) их DOM:"

#: ../../howtos/web.rst:518
msgid ""
"This allows generating and displaying any type of content, but gets unwieldy"
" when generating significant amounts of DOM (lots of duplication, quoting "
"issues, ...)"
msgstr ""
"Это позволяет генерировать и отображать любой тип контента, но становится "
"громоздким при генерации значительного количества DOM (много дублирования, "
"проблемы с цитированием, ...)"

#: ../../howtos/web.rst:522
msgid ""
"As many other environments, Odoo's solution is to use a `template engine`_. "
"Odoo's template engine is called :ref:`reference/qweb`."
msgstr ""
"Как и во многих других средах, решение Odoo заключается в использовании "
"«движка шаблонов». Шаблонный движок Odoo называется: ref: `reference / "
"qweb`."

#: ../../howtos/web.rst:525
msgid ""
"QWeb is an XML-based templating language, similar to `Genshi "
"<http://en.wikipedia.org/wiki/Genshi_(templating_language)>`_, `Thymeleaf "
"<http://en.wikipedia.org/wiki/Thymeleaf>`_ or `Facelets "
"<http://en.wikipedia.org/wiki/Facelets>`_. It has the following "
"characteristics:"
msgstr ""
"QWeb - это язык шаблонов на основе XML, похожий на `Genshi "
"<http://en.wikipedia.org/wiki/Genshi_(templating_language)> `_,` Thymeleaf "
"<http://en.wikipedia.org/wiki/Thymeleaf> `_ или` Facelets "
"<http://en.wikipedia.org/wiki/Facelets> `_. Он имеет следующие "
"характеристики:"

#: ../../howtos/web.rst:531
msgid "It's implemented fully in JavaScript and rendered in the browser"
msgstr "Он полностью реализован на JavaScript и отображается в браузере"

#: ../../howtos/web.rst:532
msgid "Each template file (XML files) contains multiple templates"
msgstr "Каждый файл шаблона (файлы XML) содержит несколько шаблонов"

#: ../../howtos/web.rst:533
msgid ""
"It has special support in Odoo Web's :class:`~odoo.Widget`, though it can be"
" used outside of Odoo's web client (and it's possible to use "
":class:`~odoo.Widget` without relying on QWeb)"
msgstr ""
"Он имеет специальную поддержку в Odoo Web: class: `~ odoo.Widget`, хотя его "
"можно использовать и вне веб-клиента Odoo (и его можно использовать: class:`"
" ~ odoo.Widget`, не полагаясь на QWeb)."

#: ../../howtos/web.rst:539
msgid ""
"The rationale behind using QWeb instead of existing javascript template "
"engines is the extensibility of pre-existing (third-party) templates, much "
"like Odoo :ref:`views <reference/views>`."
msgstr ""
"Основанием для использования QWeb вместо существующих механизмов шаблонов "
"javascript является расширяемость уже существующих (сторонних) шаблонов, во "
"многом аналогично Odoo: ref: `views <reference/views> `."

#: ../../howtos/web.rst:543
msgid ""
"Most javascript template engines are text-based which precludes easy "
"structural extensibility where an XML-based templating engine can be "
"generically altered using e.g. XPath or CSS and a tree-alteration DSL (or "
"even just XSLT). This flexibility and extensibility is a core characteristic"
" of Odoo, and losing it was considered unacceptable."
msgstr ""
"Большинство шаблонизаторов javascript основаны на тексте, что исключает "
"простую структурную расширяемость, когда шаблонизатор на основе XML может "
"быть изменен в общем, используя, например, XPath или CSS и DSL с изменением "
"дерева (или даже просто XSLT). Такая гибкость и расширяемость является "
"основной характеристикой Odoo, и ее потеря считалась неприемлемой."

#: ../../howtos/web.rst:550
msgid "Using QWeb"
msgstr "Использование QWeb"

#: ../../howtos/web.rst:552
msgid ""
"First let's define a simple QWeb template in the almost-empty "
"``oepetstore/static/src/xml/petstore.xml`` file:"
msgstr ""
"Сначала давайте определим простой шаблон QWeb в почти пустом файле `` "
"oepetstore / static / src / xml / petstore.xml``:"

#: ../../howtos/web.rst:564
msgid ""
"Now we can use this template inside of the ``HomePage`` widget. Using the "
"``QWeb`` loader variable defined at the top of the page, we can call to the "
"template defined in the XML file::"
msgstr ""
"Теперь мы можем использовать этот шаблон внутри виджета `` HomePage``. "
"Используя переменную загрузчика `` QWeb``, определенную в верхней части "
"страницы, мы можем вызвать шаблон, определенный в файле XML:"

#: ../../howtos/web.rst:574
msgid ""
":func:`QWeb.render` looks for the specified template, renders it to a string"
" and returns the result."
msgstr ""
": func: `QWeb.render` ищет указанный шаблон, отображает его в строку и "
"возвращает результат."

#: ../../howtos/web.rst:577
msgid ""
"However, because :class:`~odoo.Widget` has special integration for QWeb the "
"template can be set directly on the widget via its "
":attr:`~odoo.Widget.template` attribute::"
msgstr ""
"Однако, поскольку: class: `~ odoo.Widget` имеет специальную интеграцию для "
"QWeb, шаблон можно установить непосредственно в виджете с помощью его "
"атрибута: attr:` ~ odoo.Widget.template` ::"

#: ../../howtos/web.rst:588
msgid ""
"Although the result looks similar, there are two differences between these "
"usages:"
msgstr ""
"Несмотря на то, что результат выглядит примерно одинаково, есть два различия"
" между этими использованиями:"

#: ../../howtos/web.rst:591
msgid ""
"with the second version, the template is rendered right before "
":func:`~odoo.Widget.start` is called"
msgstr ""
"во второй версии шаблон отображается прямо перед вызовом: func: `~ "
"odoo.Widget.start`"

#: ../../howtos/web.rst:593
msgid ""
"in the first version the template's content is added to the widget's root "
"element, whereas in the second version the template's root element is "
"directly *set as* the widget's root element. Which is why the \"greetings\" "
"sub-widget also gets a red background"
msgstr ""
"в первой версии содержимое шаблона добавляется в корневой элемент виджета, "
"тогда как во второй версии корневой элемент шаблона непосредственно * "
"устанавливается как * корневой элемент виджета. Именно поэтому подвиджет "
"&quot;приветствия&quot; также получает красный фон"

#: ../../howtos/web.rst:600
msgid ""
"templates should have a single non-``t`` root element, especially if they're"
" set as a widget's :attr:`~odoo.Widget.template`. If there are multiple "
"\"root elements\", results are undefined (usually only the first root "
"element will be used and the others will be ignored)"
msgstr ""
"Шаблоны должны иметь один не `` t`` корневой элемент, особенно если они "
"установлены как виджет: attr: `~ odoo.Widget.template`. Если имеется "
"несколько «корневых элементов», результаты не определены (обычно "
"используется только первый корневой элемент, а остальные игнорируются)."

#: ../../howtos/web.rst:606
msgid "QWeb Context"
msgstr "Контекст QWeb"

#: ../../howtos/web.rst:608
msgid "QWeb templates can be given data and can contain basic display logic."
msgstr ""
"Шаблонам QWeb могут быть заданы данные и они могут содержать базовую логику "
"отображения."

#: ../../howtos/web.rst:610
msgid ""
"For explicit calls to :func:`QWeb.render`, the template data is passed as "
"second parameter::"
msgstr ""
"Для явных вызовов: func: `QWeb.render` данные шаблона передаются как второй "
"параметр:"

#: ../../howtos/web.rst:615
msgid "with the template modified to:"
msgstr "с шаблоном, измененным на:"

#: ../../howtos/web.rst:623
msgid "will result in:"
msgstr "приведет к:"

#: ../../howtos/web.rst:629
msgid ""
"When using :class:`~odoo.Widget`'s integration it is not possible to provide"
" additional data to the template. The template will be given a single "
"``widget`` context variable, referencing the widget being rendered right "
"before :func:`~odoo.Widget.start` is called (the widget's state will "
"essentially be that set up by :func:`~odoo.Widget.init`):"
msgstr ""
"При использовании интеграции: class: `~ odoo.Widget` невозможно предоставить"
" дополнительные данные для шаблона. Шаблону будет дана одна переменная "
"контекста `` widget``, ссылающаяся на виджет, визуализируемый "
"непосредственно перед вызовом: func: `~ odoo.Widget.start` (состояние "
"виджета, по сути, будет таким, как установлено: func:` ~ odoo.Widget.init`):"

#: ../../howtos/web.rst:653
msgid "Result:"
msgstr "Результат:"

#: ../../howtos/web.rst:660
msgid "Template Declaration"
msgstr "Шаблон декларации"

#: ../../howtos/web.rst:662
msgid ""
"We've seen how to *render* QWeb templates, let's now see the syntax of the "
"templates themselves."
msgstr ""
"Мы видели, как * визуализировать * шаблоны QWeb, теперь давайте посмотрим на"
" синтаксис самих шаблонов."

#: ../../howtos/web.rst:665
msgid ""
"A QWeb template is composed of regular XML mixed with QWeb *directives*. A "
"QWeb directive is declared with XML attributes starting with ``t-``."
msgstr ""
"Шаблон QWeb состоит из обычного XML, смешанного с директивами QWeb *. "
"Директива QWeb объявляется с атрибутами XML, начинающимися с `` t-``."

#: ../../howtos/web.rst:668
msgid ""
"The most basic directive is ``t-name``, used to declare new templates in a "
"template file:"
msgstr ""
"Самая основная директива - это `` t-name``, используемая для объявления "
"новых шаблонов в файле шаблона:"

#: ../../howtos/web.rst:679
msgid ""
"``t-name`` takes the name of the template being defined, and declares that "
"it can be called using :func:`QWeb.render`. It can only be used at the top-"
"level of a template file."
msgstr ""
"`` t-name`` берет имя определяемого шаблона и объявляет, что его можно "
"вызвать с помощью: func: `QWeb.render`. Он может использоваться только на "
"верхнем уровне файла шаблона."

#: ../../howtos/web.rst:684
msgid "Escaping"
msgstr "Спасаясь"

#: ../../howtos/web.rst:686
msgid "The ``t-esc`` directive can be used to output text:"
msgstr "Директива `` t-esc`` может использоваться для вывода текста:"

#: ../../howtos/web.rst:692
msgid ""
"It takes a Javascript expression which is evaluated, the result of the "
"expression is then HTML-escaped and inserted in the document. Since it's an "
"expression it's possible to provide just a variable name as above, or a more"
" complex expression like a computation:"
msgstr ""
"Он принимает выражение Javascript, которое оценивается, результат выражения "
"затем экранируется HTML и вставляется в документ. Поскольку это выражение, "
"можно указать только имя переменной, как указано выше, или более сложное "
"выражение, например, вычисление:"

#: ../../howtos/web.rst:701
msgid "or method calls:"
msgstr "или вызовы метода:"

#: ../../howtos/web.rst:708
msgid "Outputting HTML"
msgstr "Вывод HTML"

#: ../../howtos/web.rst:710
msgid ""
"To inject HTML in the page being rendered, use ``t-raw``. Like ``t-esc`` it "
"takes an arbitrary Javascript expression as parameter, but it does not "
"perform an HTML-escape step."
msgstr ""
"Чтобы внедрить HTML в отображаемую страницу, используйте `` t-raw``. Как и "
"`` t-esc``, он принимает произвольное выражение Javascript в качестве "
"параметра, но не выполняет шаг HTML-escape."

#: ../../howtos/web.rst:720
msgid ""
"``t-raw`` *must not* be used on any data which may contain non-escaped user-"
"provided content as this leads to `cross-site scripting`_ vulnerabilities"
msgstr ""
"`` t-raw`` * * не должен * использоваться для каких-либо данных, которые "
"могут содержать неэкранированный пользовательский контент, так как это "
"приводит к уязвимости `межсайтовый скриптинг`_"

#: ../../howtos/web.rst:725
msgid "Conditionals"
msgstr "Conditionals"

#: ../../howtos/web.rst:727
msgid ""
"QWeb can have conditional blocks using ``t-if``. The directive takes an "
"arbitrary expression, if the expression is falsy (``false``, ``null``, ``0``"
" or an empty string) the whole block is suppressed, otherwise it is "
"displayed."
msgstr ""
"QWeb может иметь условные блоки, используя `` t-if``. Директива принимает "
"произвольное выражение, если выражение является ложным (`` false``, `` "
"null``, `` 0`` или пустой строкой), весь блок подавляется, в противном "
"случае он отображается."

#: ../../howtos/web.rst:744
msgid ""
"QWeb doesn't have an \"else\" structure, use a second ``t-if`` with the "
"original condition inverted. You may want to store the condition in a local "
"variable if it's a complex or expensive expression."
msgstr ""
"У QWeb нет структуры &quot;else&quot;, используйте второй `` t-if`` с "
"инвертированным исходным условием. Вы можете сохранить условие в локальной "
"переменной, если это сложное или дорогое выражение."

#: ../../howtos/web.rst:749
msgid "Iteration"
msgstr "итерация"

#: ../../howtos/web.rst:751
msgid ""
"To iterate on a list, use ``t-foreach`` and ``t-as``. ``t-foreach`` takes an"
" expression returning a list to iterate on ``t-as`` takes a variable name to"
" bind to each item during iteration."
msgstr ""
"Для итерации по списку используйте `` t-foreach`` и `` t-as``. `` "
"t-foreach`` принимает выражение, возвращающее список для повторения на `` "
"t-as``, принимает имя переменной для привязки к каждому элементу во время "
"итерации."

#: ../../howtos/web.rst:765
msgid "``t-foreach`` can also be used with numbers and objects (dictionaries)"
msgstr ""
"`` t-foreach`` также можно использовать с числами и объектами (словарями)"

#: ../../howtos/web.rst:769
msgid "Defining attributes"
msgstr "Определение атрибутов"

#: ../../howtos/web.rst:771
msgid ""
"QWeb provides two related directives to define computed attributes: "
":samp:`t-att-{name}` and :samp:`t-attf-{name}`. In either case, *name* is "
"the name of the attribute to create (e.g. ``t-att-id`` defines the attribute"
" ``id`` after rendering)."
msgstr ""
"QWeb предоставляет две связанные директивы для определения вычисляемых "
"атрибутов:: samp: `t-att- {name}` и: samp: `t-attf- {name}`. В любом случае "
"* name * - это имя атрибута, который нужно создать (например, `` t-att-id`` "
"определяет атрибут `` id`` после рендеринга)."

#: ../../howtos/web.rst:776
msgid ""
"``t-att-`` takes a javascript expression whose result is set as the "
"attribute's value, it is most useful if all of the attribute's value is "
"computed:"
msgstr ""
"`` t-att-`` принимает выражение javascript, результат которого установлен в "
"качестве значения атрибута, это наиболее полезно, если вычисляется все "
"значение атрибута:"

#: ../../howtos/web.rst:787
msgid ""
"``t-attf-`` takes a *format string*. A format string is literal text with "
"interpolation blocks inside, an interpolation block is a javascript "
"expression between ``{{`` and ``}}``, which will be replaced by the result "
"of the expression. It is most useful for attributes which are partially "
"literal and partially computed such as a class:"
msgstr ""
"`` t-attf-`` принимает * строку формата *. Строка формата - это буквальный "
"текст с блоками интерполяции внутри, а блок интерполяции - это выражение "
"javascript между `` {{`` и ``}} ``, которое будет заменено результатом "
"выражения. Это наиболее полезно для атрибутов, которые являются частично "
"литеральными и частично вычисляемыми, такими как класс:"

#: ../../howtos/web.rst:800
msgid "Calling other templates"
msgstr "Вызов других шаблонов"

#: ../../howtos/web.rst:802
msgid ""
"Templates can be split into sub-templates (for simplicity, maintainability, "
"reusability or to avoid excessive markup nesting)."
msgstr ""
"Шаблоны могут быть разбиты на под-шаблоны (для простоты, удобства "
"обслуживания, возможности повторного использования или во избежание "
"чрезмерного вложения разметки)."

#: ../../howtos/web.rst:805
msgid ""
"This is done using the ``t-call`` directive, which takes the name of the "
"template to render:"
msgstr ""
"Это делается с помощью директивы `` t-call``, которая берет имя шаблона для "
"рендеринга:"

#: ../../howtos/web.rst:819
msgid "rendering the ``A`` template will result in:"
msgstr "рендеринг шаблона `` A`` приведет к:"

#: ../../howtos/web.rst:827
msgid "Sub-templates inherit the rendering context of their caller."
msgstr "Под-шаблоны наследуют контекст рендеринга своего абонента."

#: ../../howtos/web.rst:830
msgid "To Learn More About QWeb"
msgstr "Чтобы узнать больше о QWeb"

#: ../../howtos/web.rst:832
msgid "For a QWeb reference, see :ref:`reference/qweb`."
msgstr "Ссылку на QWeb смотрите: ref: `reference / qweb`."

#: ../../howtos/web.rst:835 ../../howtos/web.rst:1101
msgid "Exercise"
msgstr "Упражнение"

#: ../../howtos/web.rst:837
msgid "Usage of QWeb in Widgets"
msgstr "Использование QWeb в виджетах"

#: ../../howtos/web.rst:839
msgid ""
"Create a widget whose constructor takes two parameters aside from "
"``parent``: ``product_names`` and ``color``."
msgstr ""
"Создайте виджет, конструктор которого принимает два параметра помимо `` "
"parent``: `` product_names`` и `` color``."

#: ../../howtos/web.rst:842
msgid ""
"``product_names`` should an array of strings, each one the name of a product"
msgstr ""
"`` product_names`` должен массив строк, каждая из которых является названием"
" продукта"

#: ../../howtos/web.rst:844
msgid ""
"``color`` is a string containing a color in CSS color format (ie: "
"``#000000`` for black)."
msgstr ""
"`` color`` - это строка, содержащая цвет в цветовом формате CSS (то есть: ``"
" # 000000`` для черного)."

#: ../../howtos/web.rst:847
msgid ""
"The widget should display the given product names one under the other, each "
"one in a separate box with a background color with the value of ``color`` "
"and a border. You should use QWeb to render the HTML. Any necessary CSS "
"should be in ``oepetstore/static/src/css/petstore.css``."
msgstr ""
"Виджет должен отображать данные названия продуктов одно под другим, каждое в"
" отдельном поле с цветом фона со значением `` color`` и рамкой. Вы должны "
"использовать QWeb для рендеринга HTML. Любой необходимый CSS должен быть в "
"`` oepetstore / static / src / css / petstore.css``."

#: ../../howtos/web.rst:852
msgid "Use the widget in ``HomePage`` with half a dozen products."
msgstr "Используйте виджет в `` HomePage`` с полдюжины товаров."

#: ../../howtos/web.rst:916
msgid "Widget Helpers"
msgstr "Помощники виджетов"

#: ../../howtos/web.rst:919
msgid "``Widget``'s jQuery Selector"
msgstr "JQuery Selector `` Widget``"

#: ../../howtos/web.rst:921
msgid ""
"Selecting DOM elements within a widget can be performed by calling the "
"``find()`` method on the widget's DOM root::"
msgstr ""
"Выбор элементов DOM внутри виджета может быть выполнен путем вызова метода "
"`` find () `` в корне DOM виджета ::"

#: ../../howtos/web.rst:926
msgid ""
"But because it's a common operation, :class:`~odoo.Widget` provides an "
"equivalent shortcut through the :func:`~odoo.Widget.$` method::"
msgstr ""
"Но поскольку это обычная операция, класс: `~ odoo.Widget` предоставляет "
"эквивалентный ярлык через метод: func:` ~ odoo.Widget. $ `::"

#: ../../howtos/web.rst:937
msgid ""
"The global jQuery function ``$()`` should *never* be used unless it is "
"absolutely necessary: selection on a widget's root are scoped to the widget "
"and local to it, but selections with ``$()`` are global to the "
"page/application and may match parts of other widgets and views, leading to "
"odd or dangerous side-effects. Since a widget should generally act only on "
"the DOM section it owns, there is no cause for global selection."
msgstr ""
"Глобальная функция jQuery `` $ () `` не должна * никогда * использоваться, "
"если только она не является абсолютно необходимой: выделение в корне виджета"
" ограничивается виджетом и локально для него, но выборки с помощью `` $ () "
"`` являются глобальными к странице / приложению и может соответствовать "
"частям других виджетов и представлений, что приводит к странным или опасным "
"побочным эффектам. Поскольку виджет обычно должен действовать только на "
"принадлежащем ему разделе DOM, нет причин для глобального выбора."

#: ../../howtos/web.rst:945
msgid "Easier DOM Events Binding"
msgstr "Более простая привязка событий DOM"

#: ../../howtos/web.rst:947
msgid ""
"We have previously bound DOM events using normal jQuery event handlers (e.g."
" ``.click()`` or ``.change()``) on widget elements::"
msgstr ""
"Ранее мы связывали события DOM, используя обычные обработчики событий jQuery"
" (например, `` .click () `` или `` .change () ``) для элементов виджета ::"

#: ../../howtos/web.rst:962
msgid "While this works it has a few issues:"
msgstr "Хотя это работает, у него есть несколько проблем:"

#: ../../howtos/web.rst:964
msgid "it is rather verbose"
msgstr "это довольно многословно"

#: ../../howtos/web.rst:965
msgid ""
"it does not support replacing the widget's root element at runtime as the "
"binding is only performed when ``start()`` is run (during widget "
"initialization)"
msgstr ""
"он не поддерживает замену корневого элемента виджета во время выполнения, "
"поскольку привязка выполняется только при запуске `` start () `` (во время "
"инициализации виджета)"

#: ../../howtos/web.rst:968
msgid "it requires dealing with ``this``-binding issues"
msgstr "требует решения проблем `` this``"

#: ../../howtos/web.rst:970
msgid ""
"Widgets thus provide a shortcut to DOM event binding via "
":attr:`~odoo.Widget.events`::"
msgstr ""
"Таким образом, виджеты предоставляют ярлык для привязки событий DOM через: "
"attr: `~ odoo.Widget.events` ::"

#: ../../howtos/web.rst:982
msgid ""
":attr:`~odoo.Widget.events` is an object (mapping) of an event to the "
"function or method to call when the event is triggered:"
msgstr ""
": attr: `~ odoo.Widget.events` - это объект (отображение) события для "
"функции или метода, вызываемого при его запуске:"

#: ../../howtos/web.rst:985
msgid ""
"the key is an event name, possibly refined with a CSS selector in which case"
" only if the event happens on a selected sub-element will the function or "
"method run: ``click`` will handle all clicks within the widget, but ``click "
".my_button`` will only handle clicks in elements bearing the ``my_button`` "
"class"
msgstr ""
"ключ - это имя события, возможно, уточненное с помощью селектора CSS; в этом"
" случае только если событие происходит с выбранным подэлементом, будет "
"запущена функция или метод: `` click`` будет обрабатывать все щелчки в "
"виджете, но `` click .my_button`` будет обрабатывать только клики в "
"элементах, имеющих класс `` my_button``"

#: ../../howtos/web.rst:990
msgid "the value is the action to perform when the event is triggered"
msgstr ""
"значение - это действие, которое нужно выполнить, когда событие инициируется"

#: ../../howtos/web.rst:992
msgid "It can be either a function::"
msgstr "Это может быть либо функция:"

#: ../../howtos/web.rst:998
msgid "or the name of a method on the object (see example above)."
msgstr "или имя метода объекта (см. пример выше)."

#: ../../howtos/web.rst:1000
msgid ""
"In either case, the ``this`` is the widget instance and the handler is given"
" a single parameter, the `jQuery event object`_ for the event."
msgstr ""
"В любом случае, `` this`` является экземпляром виджета, а обработчику дается"
" один параметр - объект события `jQuery`_ для события."

#: ../../howtos/web.rst:1004
msgid "Widget Events and Properties"
msgstr "Виджет События и Свойства"

#: ../../howtos/web.rst:1007
msgid "Events"
msgstr "События"

#: ../../howtos/web.rst:1009
msgid ""
"Widgets provide an event system (separate from the DOM/jQuery event system "
"described above): a widget can fire events on itself, and other widgets (or "
"itself) can bind themselves and listen for these events::"
msgstr ""
"Виджеты предоставляют систему событий (отдельно от системы событий DOM / "
"jQuery, описанной выше): виджет может запускать события сам по себе, а "
"другие виджеты (или он сам) могут связывать себя и прослушивать эти события:"

#: ../../howtos/web.rst:1029
msgid ""
"This widget acts as a facade, transforming user input (through DOM events) "
"into a documentable internal event to which parent widgets can bind "
"themselves."
msgstr ""
"Этот виджет действует как фасад, превращая пользовательский ввод (через "
"события DOM) в документируемое внутреннее событие, с которым родительские "
"виджеты могут связывать себя."

#: ../../howtos/web.rst:1033
msgid ""
":func:`~odoo.Widget.trigger` takes the name of the event to trigger as its "
"first (mandatory) argument, any further arguments are treated as event data "
"and passed directly to listeners."
msgstr ""
": func: `~ odoo.Widget.trigger` принимает имя события, которое будет "
"инициировано, в качестве первого (обязательного) аргумента, все последующие "
"аргументы обрабатываются как данные события и передаются непосредственно "
"слушателям."

#: ../../howtos/web.rst:1037
msgid ""
"We can then set up a parent event instantiating our generic widget and "
"listening to the ``user_chose`` event using :func:`~odoo.Widget.on`::"
msgstr ""
"Затем мы можем установить родительское событие, создающее экземпляр нашего "
"общего виджета и прослушивающее событие `` user_chose``, используя: func: `~"
" odoo.Widget.on` ::"

#: ../../howtos/web.rst:1055
msgid ""
":func:`~odoo.Widget.on` binds a function to be called when the event "
"identified by ``event_name`` is. The ``func`` argument is the function to "
"call and ``object`` is the object to which that function is related if it is"
" a method. The bound function will be called with the additional arguments "
"of :func:`~odoo.Widget.trigger` if it has any. Example::"
msgstr ""
": func: `~ odoo.Widget.on` связывает функцию, которая будет вызвана, когда "
"событие, идентифицированное` `event_name``. Аргумент `` func`` - это "
"вызываемая функция, а `` object`` - это объект, с которым связана эта "
"функция, если это метод. Связанная функция будет вызываться с "
"дополнительными аргументами: func: `~ odoo.Widget.trigger`, если она есть. "
"Пример::"

#: ../../howtos/web.rst:1074
msgid ""
"Triggering events on an other widget is generally a bad idea. The main "
"exception to that rule is ``odoo.web.bus`` which exists specifically to "
"broadcasts evens in which any widget could be interested throughout the Odoo"
" web application."
msgstr ""
"Запуск событий на другом виджете, как правило, плохая идея. Основным "
"исключением из этого правила является `` odoo.web.bus``, которое существует "
"специально для трансляций событий, в которых любой виджет может быть "
"интересен во всем веб-приложении Odoo."

#: ../../howtos/web.rst:1080
msgid "Properties"
msgstr "свойства"

#: ../../howtos/web.rst:1082
msgid ""
"Properties are very similar to normal object attributes in that they allow "
"storing data on a widget instance, however they have the additional feature "
"that they trigger events when set::"
msgstr ""
"Свойства очень похожи на обычные атрибуты объекта в том, что они позволяют "
"хранить данные в экземпляре виджета, однако у них есть дополнительная "
"функция, которая вызывает события при установке ::"

#: ../../howtos/web.rst:1095
msgid ""
":func:`~odoo.Widget.set` sets the value of a property and triggers "
":samp:`change:{propname}` (where *propname* is the property name passed as "
"first parameter to :func:`~odoo.Widget.set`) and ``change``"
msgstr ""
": func: `~ odoo.Widget.set` устанавливает значение свойства и запускает: "
"samp:` change: {propname} `(где * propname * - имя свойства, передаваемое в "
"качестве первого параметра: func:` ~ odoo. Widget.set`) и `` change``"

#: ../../howtos/web.rst:1098
msgid ":func:`~odoo.Widget.get` retrieves the value of a property."
msgstr ": func: `~ odoo.Widget.get` возвращает значение свойства."

#: ../../howtos/web.rst:1103
msgid "Widget Properties and Events"
msgstr "Свойства и события виджета"

#: ../../howtos/web.rst:1105
msgid ""
"Create a widget ``ColorInputWidget`` that will display 3 ``<input "
"type=\"text\">``. Each of these ``<input>`` is dedicated to type a "
"hexadecimal number from 00 to FF. When any of these ``<input>`` is modified "
"by the user the widget must query the content of the three ``<input>``, "
"concatenate their values to have a complete CSS color code (ie: ``#00FF00``)"
" and put the result in a property named ``color``. Please note the jQuery "
"``change()`` event that you can bind on any HTML ``<input>`` element and the"
" ``val()`` method that can query the current value of that ``<input>`` could"
" be useful to you for this exercise."
msgstr ""
"Создайте виджет `` ColorInputWidget``, который будет отображать 3 `` <input "
"type=\"text\"> ``. Каждый из этих <input> `` предназначен для ввода "
"шестнадцатеричного числа от 00 до FF. Когда любой из этих `` <input> `` "
"модифицируется пользователем, виджет должен запрашивать содержимое трех `` "
"<input> ``, объедините их значения, чтобы получить полный цветовой код CSS "
"(т.е.: `` # 00FF00``) и поместите результат в свойство с именем `` color``. "
"Обратите внимание на событие jQuery `` change () ``, которое вы можете "
"привязать к любому HTML `` <input> `` element и `` val () `` метод, который "
"может запрашивать текущее значение этого `` <input> `` может быть полезным "
"для вас для этого упражнения."

#: ../../howtos/web.rst:1115
msgid ""
"Then, modify the ``HomePage`` widget to instantiate ``ColorInputWidget`` and"
" display it. The ``HomePage`` widget should also display an empty rectangle."
" That rectangle must always, at any moment, have the same background color "
"as the color in the ``color`` property of the ``ColorInputWidget`` instance."
msgstr ""
"Затем измените виджет `` HomePage``, чтобы создать экземпляр `` "
"ColorInputWidget`` и отобразить его. Виджет `` HomePage`` также должен "
"отображать пустой прямоугольник. Этот прямоугольник всегда должен в любой "
"момент иметь тот же цвет фона, что и цвет в свойстве `` color`` экземпляра "
"`` ColorInputWidget``."

#: ../../howtos/web.rst:1121
msgid "Use QWeb to generate all HTML."
msgstr "Используйте QWeb для генерации всего HTML."

#: ../../howtos/web.rst:1194
msgid "Modify existing widgets and classes"
msgstr "Изменить существующие виджеты и классы"

#: ../../howtos/web.rst:1196
msgid ""
"The class system of the Odoo web framework allows direct modification of "
"existing classes using the :func:`~odoo.web.Class.include` method::"
msgstr ""
"Система классов веб-фреймворка Odoo позволяет напрямую изменять существующие"
" классы, используя метод: func: `~ odoo.web.Class.include` ::"

#: ../../howtos/web.rst:1214
msgid ""
"This system is similar to the inheritance mechanism, except it will alter "
"the target class in-place instead of creating a new class."
msgstr ""
"Эта система похожа на механизм наследования, за исключением того, что она "
"будет изменять целевой класс вместо создания нового класса."

#: ../../howtos/web.rst:1217
msgid ""
"In that case, ``this._super()`` will call the original implementation of a "
"method being replaced/redefined. If the class already had sub-classes, all "
"calls to ``this._super()`` in sub-classes will call the new implementations "
"defined in the call to :func:`~odoo.web.Class.include`. This will also work "
"if some instances of the class (or of any of its sub-classes) were created "
"prior to the call to :func:`~odoo.Widget.include`."
msgstr ""
"В этом случае `` this._super () `` вызовет исходную реализацию заменяемого /"
" переопределенного метода. Если у класса уже есть подклассы, все вызовы `` "
"this._super () `` в подклассах будут вызывать новые реализации, определенные"
" в вызове: func: `~ odoo.web.Class.include`. Это также будет работать, если "
"некоторые экземпляры класса (или любого из его подклассов) были созданы до "
"вызова: func: `~ odoo.Widget.include`."

#: ../../howtos/web.rst:1225
msgid "Translations"
msgstr "Переводы"

#: ../../howtos/web.rst:1227
msgid ""
"The process to translate text in Python and JavaScript code is very similar."
" You could have noticed these lines at the beginning of the ``petstore.js`` "
"file::"
msgstr ""
"Процесс перевода текста в коде Python и JavaScript очень похож. Вы могли "
"заметить эти строки в начале файла `` petstore.js`` ::"

#: ../../howtos/web.rst:1234
msgid ""
"These lines are simply used to import the translation functions in the "
"current JavaScript module. They are used thus::"
msgstr ""
"Эти строки просто используются для импорта функций перевода в текущем модуле"
" JavaScript. Они используются таким образом:"

#: ../../howtos/web.rst:1239
msgid ""
"In Odoo, translations files are automatically generated by scanning the "
"source code. All piece of code that calls a certain function are detected "
"and their content is added to a translation file that will then be sent to "
"the translators. In Python, the function is ``_()``. In JavaScript the "
"function is :func:`~odoo.web._t` (and also :func:`~odoo.web._lt`)."
msgstr ""
"В Odoo файлы переводов автоматически создаются путем сканирования исходного "
"кода. Все фрагменты кода, вызывающие определенную функцию, обнаруживаются, и"
" их содержимое добавляется в файл перевода, который затем отправляется "
"переводчикам. В Python эта функция называется `` _ () ``. В JavaScript эта "
"функция: func: `~ odoo.web._t` (а также: func:` ~ odoo.web._lt`)."

#: ../../howtos/web.rst:1245
msgid ""
"``_t()`` will return the translation defined for the text it is given. If no"
" translation is defined for that text, it will return the original text as-"
"is."
msgstr ""
"`` _t () `` вернет перевод, определенный для заданного текста. Если для "
"этого текста не определен перевод, он вернет исходный текст как есть."

#: ../../howtos/web.rst:1250
msgid ""
"To inject user-provided values in translatable strings, it is recommended to"
" use `_.str.sprintf "
"<http://gabceb.github.io/underscore.string.site/#sprintf>`_ with named "
"arguments *after* the translation::"
msgstr ""
"Для вставки пользовательских значений в переводимые строки рекомендуется "
"использовать `_.str.sprintf "
"<http://gabceb.github.io/underscore.string.site/#sprintf> `_ с именованными "
"аргументами * после * перевода ::"

#: ../../howtos/web.rst:1260
msgid ""
"This makes translatable strings more readable to translators, and gives them"
" more flexibility to reorder or ignore parameters."
msgstr ""
"Это делает переводимые строки более читаемыми для переводчиков и дает им "
"больше гибкости для изменения порядка или игнорирования параметров."

#: ../../howtos/web.rst:1263
msgid ""
":func:`~odoo.web._lt` (\"lazy translate\") is similar but somewhat more "
"complex: instead of translating its parameter immediately, it returns an "
"object which, when converted to a string, will perform the translation."
msgstr ""
": func: `~ odoo.web._lt` (« ленивый перевод ») похож, но несколько сложнее: "
"вместо немедленной трансляции своего параметра он возвращает объект, который"
" при преобразовании в строку выполнит перевод."

#: ../../howtos/web.rst:1267
msgid ""
"It is used to define translatable terms before the translations system is "
"initialized, for class attributes for instance (as modules are loaded before"
" the user's language is configured and translations are downloaded)."
msgstr ""
"Он используется для определения переводимых терминов до инициализации "
"системы переводов, например, для атрибутов класса (поскольку модули "
"загружаются до того, как язык пользователя настроен, а переводы загружены)."

#: ../../howtos/web.rst:1272
msgid "Communication with the Odoo Server"
msgstr "Связь с сервером Odoo"

#: ../../howtos/web.rst:1275
msgid "Contacting Models"
msgstr "Связаться с моделями"

#: ../../howtos/web.rst:1277
msgid ""
"Most operations with Odoo involve communicating with *models* implementing "
"business concern, these models will then (potentially) interact with some "
"storage engine (usually PostgreSQL_)."
msgstr ""
"Большинство операций с Odoo включают взаимодействие с * моделями *, "
"реализующими деловые интересы, и эти модели будут (потенциально) "
"взаимодействовать с некоторым механизмом хранения (обычно PostgreSQL_)."

#: ../../howtos/web.rst:1281
msgid ""
"Although jQuery_ provides a `$.ajax`_ function for network interactions, "
"communicating with Odoo requires additional metadata whose setup before "
"every call would be verbose and error-prone. As a result, Odoo web provides "
"higher-level communication primitives."
msgstr ""
"Хотя jQuery_ предоставляет функцию `$ .ajax`_ для сетевых взаимодействий, "
"для взаимодействия с Odoo требуются дополнительные метаданные, настройка "
"которых перед каждым вызовом будет многословной и подверженной ошибкам. В "
"результате Odoo Web предоставляет высокоуровневые коммуникационные "
"примитивы."

#: ../../howtos/web.rst:1286
msgid ""
"To demonstrate this, the file ``petstore.py`` already contains a small model"
" with a sample method:"
msgstr ""
"Чтобы продемонстрировать это, файл `` petstore.py`` уже содержит небольшую "
"модель с примером метода:"

#: ../../howtos/web.rst:1301
msgid ""
"This declares a model with two fields, and a method ``my_method()`` which "
"returns a literal dictionary."
msgstr ""
"Это объявляет модель с двумя полями и метод `` my_method () ``, который "
"возвращает буквальный словарь."

#: ../../howtos/web.rst:1304
msgid ""
"Here is a sample widget that calls ``my_method()`` and displays the result::"
msgstr ""
"Вот пример виджета, который вызывает `` my_method () `` и отображает "
"результат:"

#: ../../howtos/web.rst:1317
msgid ""
"The class used to call Odoo models is :class:`odoo.Model`. It is "
"instantiated with the Odoo model's name as first parameter "
"(``oepetstore.message_of_the_day`` here)."
msgstr ""
"Класс, используемый для вызова моделей Odoo: class: `odoo.Model`. Он "
"создается с именем модели Odoo в качестве первого параметра (`` "
"oepetstore.message_of_the_day`` здесь)."

#: ../../howtos/web.rst:1321
msgid ""
":func:`~odoo.web.Model.call` can be used to call any (public) method of an "
"Odoo model. It takes the following positional arguments:"
msgstr ""
": func: `~ odoo.web.Model.call` можно использовать для вызова любого "
"(публичного) метода модели Odoo. Он принимает следующие позиционные "
"аргументы:"

#: ../../howtos/web.rst:1324
msgid "``name``"
msgstr "`` Name``"

#: ../../howtos/web.rst:1325
msgid "The name of the method to call, ``my_method`` here"
msgstr "Имя метода для вызова, `` my_method`` здесь"

#: ../../howtos/web.rst:1341
msgid "``args``"
msgstr "`` args``"

#: ../../howtos/web.rst:1327
msgid ""
"an array of `positional arguments`_ to provide to the method. Because the "
"example has no positional argument to provide, the ``args`` parameter is not"
" provided."
msgstr ""
"массив `позиционных аргументов`_ для предоставления методу. Поскольку в "
"примере нет позиционного аргумента, параметр `` args`` не предоставляется."

#: ../../howtos/web.rst:1331
msgid "Here is an other example with positional arguments:"
msgstr "Вот другой пример с позиционными аргументами:"

#: ../../howtos/web.rst:1355
msgid "``kwargs``"
msgstr "`` kwargs``"

#: ../../howtos/web.rst:1344
msgid ""
"a mapping of `keyword arguments`_ to pass. The example provides a single "
"named argument ``context``."
msgstr ""
"отображение `ключевого слова arguments`_ для передачи. В примере представлен"
" единственный именованный аргумент `` context``."

#: ../../howtos/web.rst:1357
msgid ""
":func:`~odoo.Widget.call` returns a deferred resolved with the value "
"returned by the model's method as first argument."
msgstr ""
": func: `~ odoo.Widget.call` возвращает отложенное разрешение, значение "
"которого возвращается методом модели в качестве первого аргумента."

#: ../../howtos/web.rst:1361
msgid "CompoundContext"
msgstr "CompoundContext"

#: ../../howtos/web.rst:1363
msgid ""
"The previous section used a ``context`` argument which was not explained in "
"the method call::"
msgstr ""
"В предыдущем разделе использовался аргумент `` context``, который не был "
"объяснен в вызове метода:"

#: ../../howtos/web.rst:1368
msgid ""
"The context is like a \"magic\" argument that the web client will always "
"give to the server when calling a method. The context is a dictionary "
"containing multiple keys. One of the most important key is the language of "
"the user, used by the server to translate all the messages of the "
"application. Another one is the time zone of the user, used to compute "
"correctly dates and times if Odoo is used by people in different countries."
msgstr ""
"Контекст подобен «магическому» аргументу, который веб-клиент всегда дает "
"серверу при вызове метода. Контекст представляет собой словарь, содержащий "
"несколько ключей. Одним из наиболее важных ключей является язык "
"пользователя, используемый сервером для перевода всех сообщений приложения. "
"Другой - это часовой пояс пользователя, который используется для правильного"
" вычисления даты и времени, если Odoo используется людьми в разных странах."

#: ../../howtos/web.rst:1375
msgid ""
"The ``argument`` is necessary in all methods, otherwise bad things could "
"happen (such as the application not being translated correctly). That's why,"
" when you call a model's method, you should always provide that argument. "
"The solution to achieve that is to use :class:`odoo.web.CompoundContext`."
msgstr ""
"`` Аргумент`` необходим во всех методах, в противном случае могут произойти "
"плохие вещи (например, приложение не переведено правильно). Вот почему, "
"когда вы вызываете метод модели, вы всегда должны предоставлять этот "
"аргумент. Решением для достижения этого является использование: class: "
"`odoo.web.CompoundContext`."

#: ../../howtos/web.rst:1380
msgid ""
":class:`~odoo.web.CompoundContext` is a class used to pass the user's "
"context (with language, time zone, etc...) to the server as well as adding "
"new keys to the context (some models' methods use arbitrary keys added to "
"the context). It is created by giving to its constructor any number of "
"dictionaries or other :class:`~odoo.web.CompoundContext` instances. It will "
"merge all those contexts before sending them to the server."
msgstr ""
": class: `~ odoo.web.CompoundContext` - это класс, используемый для передачи"
" пользовательского контекста (с языком, часовым поясом и т. д.) серверу, а "
"также добавления новых ключей в контекст (в некоторых моделях используются "
"методы). произвольные ключи добавлены в контекст). Он создается путем "
"предоставления своему конструктору любого количества словарей или других "
"экземпляров: class: `~ odoo.web.CompoundContext`. Он объединит все эти "
"контексты перед отправкой на сервер."

#: ../../howtos/web.rst:1398
msgid ""
"You can see the dictionary in the argument ``context`` contains some keys "
"that are related to the configuration of the current user in Odoo plus the "
"``new_key`` key that was added when instantiating "
":class:`~odoo.web.CompoundContext`."
msgstr ""
"Вы можете увидеть словарь в аргументе `` context``, который содержит "
"некоторые ключи, относящиеся к конфигурации текущего пользователя в Odoo, "
"плюс ключ `` new_key``, который был добавлен при создании экземпляра: class:"
" `~ odoo.web. CompoundContext`."

#: ../../howtos/web.rst:1404
msgid "Queries"
msgstr "Запросы"

#: ../../howtos/web.rst:1406
msgid ""
"While :func:`~odoo.Model.call` is sufficient for any interaction with Odoo "
"models, Odoo Web provides a helper for simpler and clearer querying of "
"models (fetching of records based on various conditions): "
":func:`~odoo.Model.query` which acts as a shortcut for the common "
"combination of :py:meth:`~odoo.models.Model.search` and "
"::py:meth:`~odoo.models.Model.read`. It provides a clearer syntax to search "
"and read models::"
msgstr ""
"В то время как: func: `~ odoo.Model.call` достаточно для любого "
"взаимодействия с моделями Odoo, Odoo Web предоставляет помощника для более "
"простых и четких запросов моделей (выборка записей на основе различных "
"условий):: func:` ~ odoo. Model.query`, который действует как ярлык для "
"общей комбинации: py: meth: `~ odoo.models.Model.search` и :: py: meth:` ~ "
"odoo.models.Model.read`. Он обеспечивает более четкий синтаксис для поиска и"
" чтения моделей:"

#: ../../howtos/web.rst:1421
msgid "versus::"
msgstr "против::"

#: ../../howtos/web.rst:1431
msgid ""
":func:`~odoo.web.Model.query` takes an optional list of fields as parameter "
"(if no field is provided, all fields of the model are fetched). It returns a"
" :class:`odoo.web.Query` which can be further customized before being "
"executed"
msgstr ""
": func: `~ odoo.web.Model.query` принимает необязательный список полей в "
"качестве параметра (если поле не указано, выбираются все поля модели). Он "
"возвращает: class: `odoo.web.Query`, который может быть дополнительно "
"настроен перед выполнением"

#: ../../howtos/web.rst:1435
msgid ""
":class:`~odoo.web.Query` represents the query being built. It is immutable, "
"methods to customize the query actually return a modified copy, so it's "
"possible to use the original and the new version side-by-side. See "
":class:`~odoo.web.Query` for its customization options."
msgstr ""
": class: `~ odoo.web.Query` представляет создаваемый запрос. Он неизменен, "
"методы для настройки запроса на самом деле возвращают измененную копию, "
"поэтому можно использовать оригинал и новую версию бок о бок. Смотрите: "
"class: `~ odoo.web.Query` для его параметров настройки."

#: ../../howtos/web.rst:1440
msgid ""
"When the query is set up as desired, simply call :func:`~odoo.web.Query.all`"
" to execute it and return a deferred to its result. The result is the same "
"as :py:meth:`~odoo.models.Model.read`'s, an array of dictionaries where each"
" dictionary is a requested record, with each requested field a dictionary "
"key."
msgstr ""
"Когда запрос настроен как нужно, просто вызовите: func: `~ "
"odoo.web.Query.all`, чтобы выполнить его и вернуть отложенный результат. "
"Результат такой же, как: py: meth: `~ odoo.models.Model.read`&#39;s, массив "
"словарей, где каждый словарь является запрошенной записью, с каждым "
"запрошенным полем ключ словаря."

#: ../../howtos/web.rst:1447
msgid "Exercises"
msgstr "упражнения"

#: ../../howtos/web.rst:1449
msgid "Message of the Day"
msgstr "Послание дня"

#: ../../howtos/web.rst:1451
msgid ""
"Create a ``MessageOfTheDay``  widget displaying the last record of the "
"``oepetstore.message_of_the_day`` model. The widget should fetch its record "
"as soon as it is displayed."
msgstr ""
"Создайте виджет «MessageOfTheDay», отображающий последнюю запись модели "
"«oepetstore.message_of_the_day». Виджет должен получить свою запись, как "
"только она будет отображена."

#: ../../howtos/web.rst:1455
msgid "Display the widget in the Pet Store home page."
msgstr "Отобразите виджет на домашней странице Pet Store."

#: ../../howtos/web.rst:1515
msgid "Pet Toys List"
msgstr "Список игрушек для домашних животных"

#: ../../howtos/web.rst:1517
msgid ""
"Create a ``PetToysList`` widget displaying 5 toys (using their name and "
"their images)."
msgstr ""
"Создайте виджет `` PetToysList``, отображающий 5 игрушек (используя их имя и"
" их изображения)."

#: ../../howtos/web.rst:1520
msgid ""
"The pet toys are not stored in a new model, instead they're stored in "
"``product.product`` using a special category *Pet Toys*. You can see the "
"pre-generated toys and add new ones by going to :menuselection:`Pet Store "
"--> Pet Store --> Pet Toys`. You will probably need to explore "
"``product.product`` to create the right domain to select just pet toys."
msgstr ""
"Игрушки для домашних животных не хранятся в новой модели, вместо этого они "
"хранятся в `` product.product`` с использованием специальной категории * "
"Игрушки для домашних животных *. Вы можете увидеть предварительно "
"сгенерированные игрушки и добавить новые, перейдя по адресу: menuselection: "
"`Pet Store -&gt; Pet Store -&gt; Pet Toys`. Возможно, вам понадобится "
"изучить `` product.product``, чтобы создать правильный домен, чтобы выбрать "
"только игрушки для домашних животных."

#: ../../howtos/web.rst:1527
msgid ""
"In Odoo, images are generally stored in regular fields encoded as base64_, "
"HTML supports displaying images straight from base64 with :samp:`<img "
"src=\"data:{mime_type};base64,{base64_image_data}\"/>`"
msgstr ""
"В Odoo изображения обычно хранятся в обычных полях, закодированных как "
"base64_, HTML поддерживает отображение изображений прямо из base64 с "
"помощью: samp: ` <img src=\"data:{mime_type};base64,{base64_image_data}\"/> "
"`"

#: ../../howtos/web.rst:1531
msgid ""
"The ``PetToysList`` widget should be displayed on the home page on the right"
" of the ``MessageOfTheDay`` widget. You will need to make some layout with "
"CSS to achieve this."
msgstr ""
"Виджет `` PetToysList`` должен отображаться на главной странице справа от "
"виджета `` MessageOfTheDay``. Вам нужно будет сделать макет с помощью CSS, "
"чтобы добиться этого."

#: ../../howtos/web.rst:1651
msgid "Existing web components"
msgstr "Существующие веб-компоненты"

#: ../../howtos/web.rst:1654
msgid "The Action Manager"
msgstr "Диспетчер действий"

#: ../../howtos/web.rst:1656
msgid ""
"In Odoo, many operations start from an :ref:`action <reference/actions>`: "
"opening a menu item (to a view), printing a report, ..."
msgstr ""
"В Odoo многие операции начинаются с: ref: `action <reference/actions> `: "
"открытие пункта меню (для просмотра), печать отчета, ..."

#: ../../howtos/web.rst:1659
msgid ""
"Actions are pieces of data describing how a client should react to the "
"activation of a piece of content. Actions can be stored (and read through a "
"model) or they can be generated on-the fly (locally to the client by "
"javascript code, or remotely by a method of a model)."
msgstr ""
"Действия - это фрагменты данных, описывающие, как клиент должен реагировать "
"на активацию фрагмента контента. Действия могут быть сохранены (и прочитаны "
"через модель), или они могут быть сгенерированы на лету (локально клиенту с "
"помощью кода JavaScript или удаленно с помощью метода модели)."

#: ../../howtos/web.rst:1664
msgid ""
"In Odoo Web, the component responsible for handling and reacting to these "
"actions is the *Action Manager*."
msgstr ""
"В Odoo Web компонентом, отвечающим за обработку и реагирование на эти "
"действия, является * Диспетчер действий *."

#: ../../howtos/web.rst:1668
msgid "Using the Action Manager"
msgstr "Использование диспетчера действий"

#: ../../howtos/web.rst:1670
msgid ""
"The action manager can be invoked explicitly from javascript code by "
"creating a dictionary describing :ref:`an action <reference/actions>` of the"
" right type, and calling an action manager instance with it."
msgstr ""
"Диспетчер действий может быть вызван явно из кода javascript путем создания "
"словаря, описывающего: ref: `действие <reference/actions> `правильного типа "
"и вызывая экземпляр диспетчера действий с ним."

#: ../../howtos/web.rst:1674
msgid ""
":func:`~odoo.Widget.do_action` is a shortcut of :class:`~odoo.Widget` "
"looking up the \"current\" action manager and executing the action::"
msgstr ""
": func: `~ odoo.Widget.do_action` - это ярлык: class:` ~ odoo.Widget` для "
"поиска «текущего» диспетчера действий и выполнения действия ::"

#: ../../howtos/web.rst:1690
msgid ""
"The most common action ``type`` is ``ir.actions.act_window`` which provides "
"views to a model (displays a model in various manners), its most common "
"attributes are:"
msgstr ""
"Наиболее распространенным действием `` type`` является `` "
"ir.actions.act_window``, которое предоставляет представления модели "
"(отображает модель различными способами), ее наиболее распространенными "
"атрибутами являются:"

#: ../../howtos/web.rst:1694
msgid "``res_model``"
msgstr "`` res_model``"

#: ../../howtos/web.rst:1695
msgid "The model to display in views"
msgstr "Модель для отображения в представлениях"

#: ../../howtos/web.rst:1696
msgid "``res_id`` (optional)"
msgstr "`` res_id`` (необязательно)"

#: ../../howtos/web.rst:1697
msgid "For form views, a preselected record in ``res_model``"
msgstr ""
"Для представлений формы предварительно выбранная запись в `` res_model``"

#: ../../howtos/web.rst:1702
msgid "``views``"
msgstr "`` Views``"

#: ../../howtos/web.rst:1699
msgid ""
"Lists the views available through the action. A list of ``[view_id, "
"view_type]``, ``view_id`` can either be the database identifier of a view of"
" the right type, or ``false`` to use the view by default for the specified "
"type. View types can not be present multiple times. The action will open the"
" first view of the list by default."
msgstr ""
"Перечисляет виды, доступные через действие. Список `` [view_id, view_type] "
"``, `` view_id`` может быть либо идентификатором базы данных представления "
"правильного типа, либо `` false``, чтобы использовать представление по "
"умолчанию для указанного типа. Типы просмотра не могут присутствовать "
"несколько раз. Действие откроет первый вид списка по умолчанию."

#: ../../howtos/web.rst:1705
msgid "``target``"
msgstr "`` Target``"

#: ../../howtos/web.rst:1705
msgid ""
"Either ``current`` (the default) which replaces the \"content\" section of "
"the web client by the action, or ``new`` to open the action in a dialog box."
msgstr ""
"Либо `` current`` (по умолчанию), который заменяет раздел "
"&quot;content&quot; веб-клиента действием, либо `` new``, чтобы открыть "
"действие в диалоговом окне."

#: ../../howtos/web.rst:1708
msgid "``context``"
msgstr "`` context``"

#: ../../howtos/web.rst:1708
msgid "Additional context data to use within the action."
msgstr "Дополнительные данные контекста для использования в действии."

#: ../../howtos/web.rst:1710
msgid "Jump to Product"
msgstr "Перейти к продукту"

#: ../../howtos/web.rst:1712
msgid ""
"Modify the ``PetToysList`` component so clicking on a toy replaces the "
"homepage by the toy's form view."
msgstr ""
"Измените компонент `` PetToysList``, чтобы при нажатии на игрушку домашняя "
"страница заменялась видом формы игрушки."

#: ../../howtos/web.rst:1757
msgid "Client Actions"
msgstr "Действия клиента"

#: ../../howtos/web.rst:1759
msgid ""
"Throughout this guide, we used a simple ``HomePage`` widget which the web "
"client automatically starts when we select the right menu item. But how did "
"the Odoo web know to start this widget? Because the widget is registered as "
"a *client action*."
msgstr ""
"В этом руководстве мы использовали простой виджет `` HomePage``, который "
"веб-клиент автоматически запускает, когда мы выбираем нужный пункт меню. Но "
"как веб-сайт Odoo узнал, как запустить этот виджет? Потому что виджет "
"зарегистрирован как * клиентское действие *."

#: ../../howtos/web.rst:1764
msgid ""
"A client action is (as its name implies) an action type defined almost "
"entirely in the client, in javascript for Odoo web. The server simply sends "
"an action tag (an arbitrary name), and optionally adds a few parameters, but"
" beyond that *everything* is handled by custom client code."
msgstr ""
"Действие клиента - это (как следует из его названия) тип действия, "
"определенный почти полностью в клиенте, в javascript для Odoo web. Сервер "
"просто отправляет тег действия (произвольное имя) и при необходимости "
"добавляет несколько параметров, но кроме этого * все * обрабатывается "
"пользовательским кодом клиента."

#: ../../howtos/web.rst:1769
msgid ""
"Our widget is registered as the handler for the client action through this::"
msgstr ""
"Наш виджет зарегистрирован как обработчик для действия клиента через это:"

#: ../../howtos/web.rst:1774
msgid ""
"``instance.web.client_actions`` is a :class:`~odoo.web.Registry` in which "
"the action manager looks up client action handlers when it needs to execute "
"one. The first parameter of :class:`~odoo.web.Registry.add` is the name "
"(tag) of the client action, and the second parameter is the path to the "
"widget from the Odoo web client root."
msgstr ""
"`` instance.web.client_actions`` - это: class: `~ odoo.web.Registry`, в "
"котором диспетчер действий ищет обработчики действий клиента, когда ему "
"нужно их выполнить. Первый параметр: class: `~ odoo.web.Registry.add` - это "
"имя (тег) действия клиента, а второй параметр - это путь к виджету из корня "
"веб-клиента Odoo."

#: ../../howtos/web.rst:1780
msgid ""
"When a client action must be executed, the action manager looks up its tag "
"in the registry, walks the specified path and displays the widget it finds "
"at the end."
msgstr ""
"Когда клиентское действие должно быть выполнено, менеджер действий ищет его "
"тег в реестре, идет по указанному пути и отображает виджет, который он "
"находит в конце."

#: ../../howtos/web.rst:1784
msgid ""
"a client action handler can also be a regular function, in whch case it'll "
"be called and its result (if any) will be interpreted as the next action to "
"execute."
msgstr ""
"обработчик клиентских действий также может быть обычной функцией, в этом "
"случае он будет вызван, а его результат (если есть) будет интерпретирован "
"как следующее действие, которое будет выполнено."

#: ../../howtos/web.rst:1788
msgid ""
"On the server side, we had simply defined an ``ir.actions.client`` action:"
msgstr ""
"На стороне сервера мы просто определили действие `` ir.actions.client``:"

#: ../../howtos/web.rst:1796
msgid "and a menu opening the action:"
msgstr "и меню, открывающее действие:"

#: ../../howtos/web.rst:1804
msgid "Architecture of the Views"
msgstr "Архитектура взглядов"

#: ../../howtos/web.rst:1806
msgid ""
"Much of Odoo web's usefulness (and complexity) resides in views. Each view "
"type is a way of displaying a model in the client."
msgstr ""
"Большая часть полезности (и сложности) сети Odoo заключается в "
"представлениях. Каждый тип представления - это способ отображения модели в "
"клиенте."

#: ../../howtos/web.rst:1810
msgid "The View Manager"
msgstr "Диспетчер представлений"

#: ../../howtos/web.rst:1812
msgid ""
"When an ``ActionManager`` instance receive an action of type "
"``ir.actions.act_window``, it delegates the synchronization and handling of "
"the views themselves to a *view manager*, which will then set up one or "
"multiple views depending on the original action's requirements:"
msgstr ""
"Когда экземпляр `` ActionManager`` получает действие типа `` "
"ir.actions.act_window``, он делегирует синхронизацию и обработку самих "
"представлений * view manager *, который затем устанавливает одно или "
"несколько представлений в зависимости от на требования оригинальной акции:"

#: ../../howtos/web.rst:1822
msgid "The Views"
msgstr "Виды"

#: ../../howtos/web.rst:1824
msgid ""
"Most :ref:`Odoo views <reference/views>` are implemented through a subclass "
"of :class:`odoo.web.View` which provides a bit of generic basic structure "
"for handling events and displaying model information."
msgstr ""
"Большинство: ref: `Одо просмотров <reference/views> `реализованы через "
"подкласс: class:` odoo.web.View`, который предоставляет немного общей "
"базовой структуры для обработки событий и отображения информации о модели."

#: ../../howtos/web.rst:1828
msgid ""
"The *search view* is considered a view type by the main Odoo framework, but "
"handled separately by the web client (as it's a more permanent fixture and "
"can interact with other views, which regular views don't do)."
msgstr ""
"* Представление поиска * считается типом представления основной платформой "
"Odoo, но обрабатывается отдельно веб-клиентом (так как это более постоянный "
"объект и может взаимодействовать с другими представлениями, чего не делают "
"обычные представления)."

#: ../../howtos/web.rst:1832
msgid ""
"A view is responsible for loading its own description XML (using "
":py:class:`~odoo.models.Model.fields_view_get`) and any other data source it"
" needs. To that purpose, views are provided with an optional view identifier"
" set as the :attr:`~odoo.web.View.view_id` attribute."
msgstr ""
"Представление отвечает за загрузку своего собственного XML-описания "
"(используя: py: class: `~ odoo.models.Model.fields_view_get`) и любого "
"другого необходимого источника данных. Для этой цели представления "
"снабжаются необязательным идентификатором представления, установленным в "
"качестве атрибута: attr: `~ odoo.web.View.view_id`."

#: ../../howtos/web.rst:1837
msgid ""
"Views are also provided with a :class:`~odoo.web.DataSet` instance which "
"holds most necessary model information (the model name and possibly various "
"record ids)."
msgstr ""
"Представления также предоставляются с экземпляром: class: `~ "
"odoo.web.DataSet`, который содержит наиболее необходимую информацию о модели"
" (имя модели и, возможно, различные идентификаторы записей)."

#: ../../howtos/web.rst:1841
msgid ""
"Views may also want to handle search queries by overriding "
":func:`~odoo.web.View.do_search`, and updating their "
":class:`~odoo.web.DataSet` as necessary."
msgstr ""
"Представления могут также захотеть обрабатывать поисковые запросы, "
"переопределив: func: `~ odoo.web.View.do_search` и обновив их: class:` ~ "
"odoo.web.DataSet` по мере необходимости."

#: ../../howtos/web.rst:1846
msgid "The Form View Fields"
msgstr "Поля просмотра формы"

#: ../../howtos/web.rst:1848
msgid ""
"A common need is the extension of the web form view to add new ways of "
"displaying fields."
msgstr ""
"Общей необходимостью является расширение представления веб-формы для "
"добавления новых способов отображения полей."

#: ../../howtos/web.rst:1851
msgid ""
"All built-in fields have a default display implementation, a new form widget"
" may be necessary to correctly interact with a new field type (e.g. a "
":term:`GIS` field) or to provide new representations and ways to interact "
"with existing field types (e.g. validate :py:class:`~odoo.fields.Char` "
"fields which should contain email addresses and display them as email "
"links)."
msgstr ""
"Все встроенные поля имеют реализацию отображения по умолчанию, может "
"потребоваться новый виджет формы для правильного взаимодействия с новым "
"типом поля (например, поле: term: `GIS`) или для предоставления новых "
"представлений и способов взаимодействия с существующими типами полей "
"(например, validate: py: class: `~ odoo.fields.Char` поля, которые должны "
"содержать адреса электронной почты и отображать их в виде ссылок электронной"
" почты)."

#: ../../howtos/web.rst:1858
msgid ""
"To explicitly specify which form widget should be used to display a field, "
"simply use the ``widget`` attribute in the view's XML description:"
msgstr ""
"Чтобы явно указать, какой виджет формы следует использовать для отображения "
"поля, просто используйте атрибут `` widget`` в описании XML представления:"

#: ../../howtos/web.rst:1867
msgid ""
"the same widget is used in both \"view\" (read-only) and \"edition\" modes "
"of a form view, it's not possible to use a widget in one and an other widget"
" in the other"
msgstr ""
"один и тот же виджет используется как в режиме просмотра (только для "
"чтения), так и в режиме редактирования вида формы, невозможно использовать "
"виджет в одном и другой виджет в другом"

#: ../../howtos/web.rst:1870
msgid ""
"and a given field (name) can not be used multiple times in the same form"
msgstr "и данное поле (имя) нельзя использовать несколько раз в одной форме"

#: ../../howtos/web.rst:1871
msgid ""
"a widget may ignore the current mode of the form view and remain the same in"
" both view and edition"
msgstr ""
"виджет может игнорировать текущий режим представления формы и оставаться "
"неизменным как в представлении, так и в издании"

#: ../../howtos/web.rst:1876
msgid ""
"Fields are instantiated by the form view after it has read its XML "
"description and constructed the corresponding HTML representing that "
"description. After that, the form view will communicate with the field "
"objects using some methods. These methods are defined by the "
"``FieldInterface`` interface. Almost all fields inherit the "
"``AbstractField`` abstract class. That class defines some default mechanisms"
" that need to be implemented by most fields."
msgstr ""
"Поля создаются экземпляром представления формы после того, как он прочитал "
"свое XML-описание и создал соответствующий HTML-код, представляющий это "
"описание. После этого представление формы будет взаимодействовать с "
"объектами поля, используя некоторые методы. Эти методы определяются "
"интерфейсом `` FieldInterface``. Почти все поля наследуют абстрактный класс "
"`` AbstractField``. Этот класс определяет некоторые механизмы по умолчанию, "
"которые должны быть реализованы большинством полей."

#: ../../howtos/web.rst:1884
msgid "Here are some of the responsibilities of a field class:"
msgstr "Вот некоторые из обязанностей полевого класса:"

#: ../../howtos/web.rst:1886
msgid ""
"The field class must display and allow the user to edit the value of the "
"field."
msgstr ""
"Класс поля должен отображать и позволять пользователю редактировать значение"
" поля."

#: ../../howtos/web.rst:1887
msgid ""
"It must correctly implement the 3 field attributes available in all fields "
"of Odoo. The ``AbstractField`` class already implements an algorithm that "
"dynamically calculates the value of these attributes (they can change at any"
" moment because their value change according to the value of other fields). "
"Their values are stored in *Widget Properties* (the widget properties were "
"explained earlier in this guide). It is the responsibility of each field "
"class to check these widget properties and dynamically adapt depending of "
"their values. Here is a description of each of these attributes:"
msgstr ""
"Он должен правильно реализовать 3 атрибута поля, доступные во всех полях "
"Odoo. Класс `` AbstractField`` уже реализует алгоритм, который динамически "
"вычисляет значение этих атрибутов (они могут измениться в любой момент, "
"потому что их значение изменяется в соответствии со значением других полей)."
" Их значения хранятся в * Свойствах виджета * (свойства виджета были "
"объяснены ранее в этом руководстве). Каждый класс полей отвечает за проверку"
" этих свойств виджетов и их динамическую адаптацию в зависимости от их "
"значений. Вот описание каждого из этих атрибутов:"

#: ../../howtos/web.rst:1897
msgid ""
"``required``: The field must have a value before saving. If ``required`` is "
"``true`` and the field doesn't have a value, the method ``is_valid()`` of "
"the field must return ``false``."
msgstr ""
"`` обязательный``: поле должно иметь значение перед сохранением. Если `` "
"required`` равно `` true`` и поле не имеет значения, метод `` is_valid () ``"
" поля должен возвращать `` false``."

#: ../../howtos/web.rst:1900
msgid ""
"``invisible``: When this is ``true``, the field must be invisible. The "
"``AbstractField`` class already has a basic implementation of this behavior "
"that fits most fields."
msgstr ""
"`` invisible``: если это `` true``, поле должно быть невидимым. Класс `` "
"AbstractField`` уже имеет базовую реализацию этого поведения, которая "
"подходит для большинства полей."

#: ../../howtos/web.rst:1903
msgid ""
"``readonly``: When ``true``, the field must not be editable by the user. "
"Most fields in Odoo have a completely different behavior depending on the "
"value of ``readonly``. As example, the ``FieldChar`` displays an HTML "
"``<input>`` when it is editable and simply displays the text when it is "
"read-only. This also means it has much more code it would need to implement "
"only one behavior, but this is necessary to ensure a good user experience."
msgstr ""
"`` readonly``: когда `` true``, поле не должно редактироваться "
"пользователем. Большинство полей в Odoo ведут себя совершенно по-разному в "
"зависимости от значения `` readonly``. Например, `` FieldChar`` отображает "
"HTML `` <input> `` когда он доступен для редактирования и просто отображает "
"текст, когда он доступен только для чтения. Это также означает, что в нем "
"гораздо больше кода, необходимого для реализации только одного поведения, но"
" это необходимо для обеспечения хорошего взаимодействия с пользователем."

#: ../../howtos/web.rst:1911
msgid ""
"Fields have two methods, ``set_value()`` and ``get_value()``, which are "
"called by the form view to give it the value to display and get back the new"
" value entered by the user. These methods must be able to handle the value "
"as given by the Odoo server when a ``read()`` is performed on a model and "
"give back a valid value for a ``write()``.  Remember that the "
"JavaScript/Python data types used to represent the values given by "
"``read()`` and given to ``write()`` is not necessarily the same in Odoo. As "
"example, when you read a many2one, it is always a tuple whose first value is"
" the id of the pointed record and the second one is the name get (ie: ``(15,"
" \"Agrolait\")``). But when you write a many2one it must be a single "
"integer, not a tuple anymore. ``AbstractField`` has a default implementation"
" of these methods that works well for simple data type and set a widget "
"property named ``value``."
msgstr ""
"Поля имеют два метода: `` set_value () `` и `` get_value () ``, которые "
"вызываются представлением формы, чтобы дать ему значение для отображения и "
"возврата нового значения, введенного пользователем. Эти методы должны иметь "
"возможность обрабатывать значение, заданное сервером Odoo, когда `` read () "
"`` выполняется на модели, и возвращать действительное значение для `` write "
"() ``. Помните, что типы данных JavaScript / Python, используемые для "
"представления значений, заданных `` read () `` и переданных `` write () ``, "
"не обязательно совпадают в Odoo. Например, когда вы читаете many2one, это "
"всегда кортеж, первое значение которого является идентификатором указанной "
"записи, а второе - именем get (то есть: `` (15, &quot;Agrolait&quot;) ``). "
"Но когда вы пишете many2one, это должно быть одно целое число, а не кортеж. "
"`` AbstractField`` имеет реализацию этих методов по умолчанию, которая "
"хорошо работает для простого типа данных и устанавливает свойство виджета с "
"именем `` value``."

#: ../../howtos/web.rst:1925
msgid ""
"Please note that, to better understand how to implement fields, you are "
"strongly encouraged to look at the definition of the ``FieldInterface`` "
"interface and the ``AbstractField`` class directly in the code of the Odoo "
"web client."
msgstr ""
"Обратите внимание, что для лучшего понимания того, как реализовать поля, вам"
" настоятельно рекомендуется взглянуть на определение интерфейса `` "
"FieldInterface`` и класса `` AbstractField`` непосредственно в коде веб-"
"клиента Odoo."

#: ../../howtos/web.rst:1931
msgid "Creating a New Type of Field"
msgstr "Создание нового типа поля"

#: ../../howtos/web.rst:1933
msgid ""
"In this part we will explain how to create a new type of field. The example "
"here will be to re-implement the ``FieldChar`` class and progressively "
"explain each part."
msgstr ""
"В этой части мы объясним, как создать новый тип поля. Примером здесь будет "
"повторная реализация класса `` FieldChar`` и постепенное объяснение каждой "
"части."

#: ../../howtos/web.rst:1938
msgid "Simple Read-Only Field"
msgstr "Простое поле только для чтения"

#: ../../howtos/web.rst:1940
msgid ""
"Here is a first implementation that will only display text. The user will "
"not be able to modify the content of the field."
msgstr ""
"Вот первая реализация, которая будет отображать только текст. Пользователь "
"не сможет изменять содержимое поля."

#: ../../howtos/web.rst:1957
msgid ""
"In this example, we declare a class named ``FieldChar2`` inheriting from "
"``AbstractField``. We also register this class in the registry "
"``instance.web.form.widgets`` under the key ``char2``. That will allow us to"
" use this new field in any form view by specifying ``widget=\"char2\"`` in "
"the ``<field/>`` tag in the XML declaration of the view."
msgstr ""
"В этом примере мы объявляем класс с именем `` FieldChar2``, унаследованный "
"от `` AbstractField``. Мы также регистрируем этот класс в реестре `` "
"instance.web.form.widgets`` под ключом `` char2``. Это позволит нам "
"использовать это новое поле в любом представлении формы, указав `` widget = "
"&quot;char2&quot; `` в `` <field/> `` тег в объявлении XML представления."

#: ../../howtos/web.rst:1963
msgid ""
"In this example, we define a single method: ``render_value()``. All it does "
"is display the widget property ``value``.  Those are two tools defined by "
"the ``AbstractField`` class. As explained before, the form view will call "
"the method ``set_value()`` of the field to set the value to display. This "
"method already has a default implementation in ``AbstractField`` which "
"simply sets the widget property ``value``. ``AbstractField`` also watch the "
"``change:value`` event on itself and calls the ``render_value()`` when it "
"occurs. So, ``render_value()`` is a convenience method to implement in child"
" classes to perform some operation each time the value of the field changes."
msgstr ""
"В этом примере мы определяем один метод: `` render_value () ``. Все, что он "
"делает, это отображает свойство виджета `` value``. Это два инструмента, "
"определенных классом `` AbstractField``. Как объяснялось ранее, "
"представление формы будет вызывать метод `` set_value () `` поля для "
"установки значения для отображения. Этот метод уже имеет реализацию по "
"умолчанию в `` AbstractField``, которая просто устанавливает свойство "
"виджета `` value``. `` AbstractField`` также наблюдает за событием `` "
"change: value`` и вызывает `` render_value () `` при его возникновении. "
"Итак, `` render_value () `` - это удобный метод для реализации в дочерних "
"классах, чтобы выполнять некоторые операции каждый раз, когда значение поля "
"изменяется."

#: ../../howtos/web.rst:1973
msgid ""
"In the ``init()`` method, we also define the default value of the field if "
"none is specified by the form view (here we assume the default value of a "
"``char`` field should be an empty string)."
msgstr ""
"В методе `` init () `` мы также определяем значение по умолчанию для поля, "
"если оно не указано в представлении формы (здесь мы предполагаем, что "
"значение по умолчанию для поля `` char`` должно быть пустой строкой)."

#: ../../howtos/web.rst:1978
msgid "Read-Write Field"
msgstr "Поле для чтения и записи"

#: ../../howtos/web.rst:1980
msgid ""
"Read-only fields, which only display content and don't allow the user to "
"modify it can be useful, but most fields in Odoo also allow editing. This "
"makes the field classes more complicated, mostly because fields are supposed"
" to handle both editable and non-editable mode, those modes are often "
"completely different (for design and usability purpose) and the fields must "
"be able to switch between modes at any moment."
msgstr ""
"Поля только для чтения, которые только отображают контент и не позволяют "
"пользователю изменять его, могут быть полезны, но большинство полей в Odoo "
"также позволяют редактировать. Это делает классы полей более сложными, "
"главным образом потому, что поля должны обрабатывать как редактируемый, так "
"и нередактируемый режим, эти режимы часто совершенно разные (для целей "
"разработки и удобства использования), и поля должны иметь возможность "
"переключаться между режимами в любой момент."

#: ../../howtos/web.rst:1987
msgid ""
"To know in which mode the current field should be, the ``AbstractField`` "
"class sets a widget property named ``effective_readonly``. The field should "
"watch for changes in that widget property and display the correct mode "
"accordingly. Example::"
msgstr ""
"Чтобы узнать, в каком режиме должно быть текущее поле, класс `` "
"AbstractField`` устанавливает свойство виджета с именем "
"``ffective_readonly``. Поле должно следить за изменениями в этом свойстве "
"виджета и отображать правильный режим соответственно. Пример::"

#: ../../howtos/web.rst:2035
msgid ""
"In the ``start()`` method (which is called immediately after a widget has "
"been appended to the DOM), we bind on the event "
"``change:effective_readonly``. That allows us to redisplay the field each "
"time the widget property ``effective_readonly`` changes. This event handler "
"will call ``display_field()``, which is also called directly in ``start()``."
" This ``display_field()`` was created specifically for this field, it's not "
"a method defined in ``AbstractField`` or any other class. We can use this "
"method to display the content of the field depending on the current mode."
msgstr ""
"В методе `` start () `` (который вызывается сразу после добавления виджета в"
" DOM) мы связываемся с событием `` change :ffective_readonly``. Это "
"позволяет нам отображать поле каждый раз, когда изменяется свойство виджета "
"``ffective_readonly``. Этот обработчик события вызовет `` display_field () "
"``, который также вызывается непосредственно в `` start () ``. `` "
"Display_field () `` был создан специально для этого поля, это не метод, "
"определенный в `` AbstractField`` или любом другом классе. Мы можем "
"использовать этот метод для отображения содержимого поля в зависимости от "
"текущего режима."

#: ../../howtos/web.rst:2044
msgid ""
"From now on the conception of this field is typical, except there is a lot "
"of verifications to know the state of the ``effective_readonly`` property:"
msgstr ""
"Отныне концепция этого поля является типичной, за исключением того, что есть"
" много проверок, чтобы узнать состояние свойства ``ffective_readonly``:"

#: ../../howtos/web.rst:2047
msgid ""
"In the QWeb template used to display the content of the widget, it displays "
"an ``<input type=\"text\" />`` if we are in read-write mode and nothing in "
"particular in read-only mode."
msgstr ""
"В шаблоне QWeb, используемом для отображения содержимого виджета, он "
"отображает `` <input type=\"text\" /> `` если мы находимся в режиме чтения-"
"записи и ничего особенно в режиме только для чтения."

#: ../../howtos/web.rst:2050
msgid ""
"In the ``display_field()`` method, we have to bind on the ``change`` event "
"of the ``<input type=\"text\" />`` to know when the user has changed the "
"value. When it happens, we call the ``internal_set_value()`` method with the"
" new value of the field. This is a convenience method provided by the "
"``AbstractField`` class. That method will set a new value in the ``value`` "
"property but will not trigger a call to ``render_value()`` (which is not "
"necessary since the ``<input type=\"text\" />`` already contains the correct"
" value)."
msgstr ""
"В методе `` display_field () `` мы должны связать событие `` change`` с `` "
"<input type=\"text\" /> `` знать, когда пользователь изменил значение. Когда"
" это происходит, мы вызываем метод `` internal_set_value () `` с новым "
"значением поля. Это удобный метод, предоставляемый классом `` "
"AbstractField``. Этот метод установит новое значение в свойстве `` value``, "
"но не вызовет вызов `` render_value () `` (который не является необходимым, "
"поскольку `` <input type=\"text\" /> `` уже содержит правильное значение)."

#: ../../howtos/web.rst:2058
msgid ""
"In ``render_value()``, we use a completely different code to display the "
"value of the field depending if we are in read-only or in read-write mode."
msgstr ""
"В `` render_value () `` мы используем совершенно другой код для отображения "
"значения поля в зависимости от того, находимся ли мы только для чтения или в"
" режиме чтения-записи."

#: ../../howtos/web.rst:2061
msgid "Create a Color Field"
msgstr "Создать поле цвета"

#: ../../howtos/web.rst:2063
msgid ""
"Create a ``FieldColor`` class. The value of this field should be a string "
"containing a color code like those used in CSS (example: ``#FF0000`` for "
"red). In read-only mode, this color field should display a little block "
"whose color corresponds to the value of the field. In read-write mode, you "
"should display an ``<input type=\"color\" />``. That type of ``<input />`` "
"is an HTML5 component that doesn't work in all browsers but works well in "
"Google Chrome. So it's OK to use as an exercise."
msgstr ""
"Создайте класс `` FieldColor``. Значение этого поля должно быть строкой, "
"содержащей цветовой код, подобный используемому в CSS (пример: `` # FF0000``"
" для красного). В режиме только для чтения это цветное поле должно "
"отображать небольшой блок, цвет которого соответствует значению поля. В "
"режиме чтения-записи вы должны отобразить `` <input type=\"color\" /> ``. "
"Этот тип <input /> `` - это компонент HTML5, который работает не во всех "
"браузерах, но хорошо работает в Google Chrome. Так что это нормально "
"использовать в качестве упражнения."

#: ../../howtos/web.rst:2071
msgid ""
"You can use that widget in the form view of the ``message_of_the_day`` model"
" for its field named ``color``. As a bonus, you can change the "
"``MessageOfTheDay`` widget created in the previous part of this guide to "
"display the message of the day with the background color indicated in the "
"``color`` field."
msgstr ""
"Вы можете использовать этот виджет в виде формы модели `` "
"message_of_the_day`` для его поля с именем `` color``. В качестве бонуса вы "
"можете изменить виджет `` MessageOfTheDay``, созданный в предыдущей части "
"этого руководства, для отображения сообщения дня с цветом фона, указанным в "
"поле `` color``."

#: ../../howtos/web.rst:2136
msgid "The Form View Custom Widgets"
msgstr "Форма просмотра пользовательских виджетов"

#: ../../howtos/web.rst:2138
msgid ""
"Form fields are used to edit a single field, and are intrinsically linked to"
" a field. Because this may be limiting, it is also possible to create *form "
"widgets* which are not so restricted and have less ties to a specific "
"lifecycle."
msgstr ""
"Поля формы используются для редактирования одного поля и неразрывно связаны "
"с полем. Поскольку это может быть ограничением, также возможно создавать * "
"виджеты форм *, которые не так ограничены и имеют меньше связей с конкретным"
" жизненным циклом."

#: ../../howtos/web.rst:2143
msgid ""
"Custom form widgets can be added to a form view through the ``widget`` tag:"
msgstr ""
"Пользовательские виджеты формы могут быть добавлены в представление формы "
"через тег `` widget``:"

#: ../../howtos/web.rst:2149
msgid ""
"This type of widget will simply be created by the form view during the "
"creation of the HTML according to the XML definition. They have properties "
"in common with the fields (like the ``effective_readonly`` property) but "
"they are not assigned a precise field. And so they don't have methods like "
"``get_value()`` and ``set_value()``. They must inherit from the "
"``FormWidget`` abstract class."
msgstr ""
"Этот тип виджета будет просто создан представлением формы во время создания "
"HTML в соответствии с определением XML. Они имеют общие свойства с полями "
"(например, свойство ``ffective_readonly``), но им не назначено точное поле. "
"И поэтому у них нет методов типа `` get_value () `` и `` set_value () ``. "
"Они должны наследоваться от абстрактного класса `` FormWidget``."

#: ../../howtos/web.rst:2156
msgid ""
"Form widgets can interact with form fields by listening for their changes "
"and fetching or altering their values. They can access form fields through "
"their :attr:`~odoo.web.form.FormWidget.field_manager` attribute::"
msgstr ""
"Виджеты форм могут взаимодействовать с полями форм, прослушивая их изменения"
" и выбирая или изменяя их значения. Они могут получить доступ к полям формы "
"через свой атрибут: attr: `~ odoo.web.form.FormWidget.field_manager` ::"

#: ../../howtos/web.rst:2176
msgid ""
":attr:`~odoo.web.form.FormWidget` is generally the "
":class:`~odoo.web.form.FormView` itself, but features used from it should be"
" limited to those defined by :class:`~odoo.web.form.FieldManagerMixin`, the "
"most useful being:"
msgstr ""
": attr: `~ odoo.web.form.FormWidget`, как правило, сам по себе: class:` ~ "
"odoo.web.form.FormView`, но используемые в нем функции должны быть "
"ограничены теми, которые определены: class: `~ odoo. "
"web.form.FieldManagerMixin`, наиболее полезным из которых является:"

#: ../../howtos/web.rst:2181
msgid ""
":func:`~odoo.web.form.FieldManagerMixin.get_field_value(field_name)` which "
"returns the value of a field."
msgstr ""
": func: `~ odoo.web.form.FieldManagerMixin.get_field_value (field_name)`, "
"которая возвращает значение поля."

#: ../../howtos/web.rst:2183
msgid ""
":func:`~odoo.web.form.FieldManagerMixin.set_values(values)` sets multiple "
"field values, takes a mapping of ``{field_name: value_to_set}``"
msgstr ""
": func: `~ odoo.web.form.FieldManagerMixin.set_values (values)` "
"устанавливает несколько значений поля, принимает отображение `` {field_name:"
" value_to_set} ``"

#: ../../howtos/web.rst:2185
msgid ""
"An event :samp:`field_changed:{field_name}` is triggered any time the value "
"of the field called ``field_name`` is changed"
msgstr ""
"Событие: samp: `field_changed: {field_name}` запускается каждый раз, когда "
"изменяется значение поля `` field_name``"

#: ../../howtos/web.rst:2188
msgid "Show Coordinates on Google Map"
msgstr "Показать координаты на карте Google"

#: ../../howtos/web.rst:2190
msgid ""
"Add two fields to ``product.product`` storing a latitude and a longitude, "
"then create a new form widget to display the latitude and longitude of a "
"product's origin on a map"
msgstr ""
"Добавьте два поля в `` product.product``, хранящие широту и долготу, затем "
"создайте новый виджет формы, чтобы отобразить широту и долготу происхождения"
" товара на карте."

#: ../../howtos/web.rst:2194
msgid "To display the map, use Google Map's embedding:"
msgstr "Чтобы отобразить карту, используйте вложение Google Map:"

#: ../../howtos/web.rst:2201
msgid ""
"where ``XXX`` should be replaced by the latitude and ``YYY`` by the "
"longitude."
msgstr "где `` XXX`` следует заменить на широту, а `` YYY`` на долготу."

#: ../../howtos/web.rst:2204
msgid ""
"Display the two position fields and a map widget using them in a new "
"notebook page of the product's form view."
msgstr ""
"Отобразите два поля позиции и виджет карты, используя их на новой странице "
"записной книжки вида продукта."

#: ../../howtos/web.rst:2236
msgid "Get the Current Coordinate"
msgstr "Получить текущую координату"

#: ../../howtos/web.rst:2238
msgid ""
"Add a button resetting the product's coordinates to the location of the "
"user, you can get these coordinates using the `javascript geolocation API`_."
msgstr ""
"Добавьте кнопку сброса координат продукта к местоположению пользователя, вы "
"можете получить эти координаты с помощью `API геолокации javascript`_."

#: ../../howtos/web.rst:2242
msgid ""
"Now we would like to display an additional button to automatically set the "
"coordinates to the location of the current user."
msgstr ""
"Теперь мы хотели бы отобразить дополнительную кнопку, чтобы автоматически "
"установить координаты местоположения текущего пользователя."

#: ../../howtos/web.rst:2245
msgid ""
"To get the coordinates of the user, an easy way is to use the geolocation "
"JavaScript API.  `See the online documentation to know how to use it`_."
msgstr ""
"Чтобы получить координаты пользователя, проще всего использовать JavaScript "
"API геолокации. `Смотрите онлайн документацию, чтобы узнать, как ее "
"использовать`_."

#: ../../howtos/web.rst:2250
msgid ""
"Please also note that the user should not be able to click on that button "
"when the form view is in read-only mode. So, this custom widget should "
"handle correctly the ``effective_readonly`` property just like any field. "
"One way to do this would be to make the button disappear when "
"``effective_readonly`` is true."
msgstr ""
"Обратите также внимание, что пользователь не должен нажимать на эту кнопку, "
"когда представление формы находится в режиме только для чтения. Таким "
"образом, этот пользовательский виджет должен правильно обрабатывать свойство"
" ``ffective_readonly``, как любое поле. Один из способов сделать это - "
"сделать так, чтобы кнопка исчезла, когда ``ffective_readonly`` истинно."

#: ../../howtos/web.rst:2301
msgid ""
"as a separate concept from instances. In many languages classes are full-"
"fledged objects and themselves instance (of metaclasses) but there remains "
"two fairly separate hierarchies between classes and instances"
msgstr ""
"как отдельное понятие от экземпляров. Во многих языках классы являются "
"полноценными объектами и самим экземпляром (метаклассов), но между классами "
"и экземплярами остаются две довольно отдельные иерархии"

#: ../../howtos/web.rst:2305
msgid ""
"as well as papering over cross-browser differences, although this has become"
" less necessary over time"
msgstr ""
"а также устранение различий между браузерами, хотя со временем это стало "
"менее необходимым"
