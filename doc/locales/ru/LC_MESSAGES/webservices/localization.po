# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo 13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-07 15:02+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../webservices/localization.rst:5
msgid "Creating a Localization"
msgstr ""

#: ../../webservices/localization.rst:9
msgid ""
"This tutorial requires knowledges about how to build a module in Odoo "
"(see :doc:`../../howtos/backend`)."
msgstr ""

#: ../../webservices/localization.rst:13
msgid "Building a localization module"
msgstr ""

#: ../../webservices/localization.rst:15
msgid ""
"When installing the ``accounting`` module, the localization module "
"corresponding to the country code of the company is installed "
"automatically. In case of no country code set or no localization module "
"found, the ``l10n_generic_coa`` (US) localization module is installed by "
"default."
msgstr ""

#: ../../webservices/localization.rst:18
msgid ""
"For example, ``l10n_be`` will be installed if the company has ``Belgium``"
" as country."
msgstr ""

#: ../../webservices/localization.rst:20
msgid ""
"This behavior is allowed by the presence of a *.xml* file containing the "
"following code:"
msgstr ""

#: ../../webservices/localization.rst:28
msgid ""
"Where ``module.template_xmlid`` is the **fully-qualified** xmlid of the "
"corresponding template."
msgstr ""

#: ../../webservices/localization.rst:30
msgid ""
"Usually located in the ``data`` folder, it must be loaded at the very "
"last in the ``__manifest__.py`` file."
msgstr ""

#: ../../webservices/localization.rst:34
msgid ""
"If the *.xml* file is missing, the right chart of accounts won't be "
"loaded on time!"
msgstr ""

#: ../../webservices/localization.rst:38
msgid "Configuring my own Chart of Accounts?"
msgstr ""

#: ../../webservices/localization.rst:40
msgid ""
"First of all, before I proceed, we need to talk about the templates. A "
"template is a record that allows replica of itself. This mechanism is "
"needed when working in multi-companies. For example, the creation of a "
"new account is done using the ``account.account.template`` model. "
"However, each company using this chart of accounts will be linked to a "
"replica having ``account.account`` as model. So, the templates are never "
"used directly by the company."
msgstr ""

#: ../../webservices/localization.rst:45
msgid ""
"Then, when a chart of accounts needs to be installed, all templates "
"dependent of this one will create a replica and link this newly generated"
" record to the company's user. It means all such templates must be linked"
" to the chart of accounts in some way. To do so, each one must reference "
"the desired chart of accounts using the ``chart_template_id`` field. For "
"this reason, we need to define an instance of the "
"``account.chart.template`` model before creating its templates."
msgstr ""

#: ../../webservices/localization.rst:88
msgid "For example, let's take a look to the Belgium chart of accounts."
msgstr ""

#: ../../webservices/localization.rst:100
msgid ""
"Now that the chart of accounts is created, we can focus on the creation "
"of the templates. As said previously, each record must reference this "
"record through the ``chart_template_id`` field. If not, the template will"
" be ignored. The following sections show in details how to create these "
"templates."
msgstr ""

#: ../../webservices/localization.rst:105
msgid "Adding a new account to my Chart of Accounts"
msgstr ""

#: ../../webservices/localization.rst:107
msgid ""
"It's time to create our accounts. It consists to creating records of "
"``account.account.template`` type. Each ``account.account.template`` is "
"able to create an ``account.account`` for each company."
msgstr ""

#: ../../webservices/localization.rst:138
msgid "Some of the described fields above deserve a bit more explanation."
msgstr ""

#: ../../webservices/localization.rst:140
msgid ""
"The ``user_type_id`` field requires a value of type "
"``account.account.type``. Although some additional types could be created"
" in a localization module, we encourage the usage of the existing types "
"in the `account/data/data_account_type.xml "
"<https://github.com/odoo/odoo/blob/13.0/addons/account/data/data_account_type.xml>`_"
" file. The usage of these generic types ensures the generic reports "
"working correctly in addition to those that you could create in your "
"localization module."
msgstr ""

#: ../../webservices/localization.rst:146
msgid ""
"Avoid the usage of liquidity ``account.account.type``! Indeed, the bank &"
" cash accounts are created directly at the installation of the "
"localization module and then, are linked to an ``account.journal``."
msgstr ""

#: ../../webservices/localization.rst:151
msgid "Only one account of type payable/receivable is enough."
msgstr ""

#: ../../webservices/localization.rst:153
msgid ""
"Although the ``tag_ids`` field is optional, this one remains a very "
"powerful feature. Indeed, this one allows you to define some tags for "
"your accounts to spread them correctly on your reports. For example, "
"suppose you want to create a financial report having multiple lines but "
"you have no way to find a rule to dispatch the accounts according their "
"``code`` or ``name``. The solution is the usage of tags, one for each "
"report line, to spread and aggregate your accounts like you want."
msgstr ""

#: ../../webservices/localization.rst:158
msgid ""
"Like any other record, a tag can be created with the following xml "
"structure:"
msgstr ""

#: ../../webservices/localization.rst:171
msgid ""
"As you can well imagine with the usage of tags, this feature can also be "
"used with taxes."
msgstr ""

#: ../../webservices/localization.rst:173
msgid "An examples coming from the ``l10n_be`` module:"
msgstr ""

#: ../../webservices/localization.rst:186
msgid "Don't create too much accounts: 200-300 is enough."
msgstr ""

#: ../../webservices/localization.rst:189
msgid "Adding a new tax to my Chart of Accounts"
msgstr ""

#: ../../webservices/localization.rst:191
msgid ""
"To create a new tax record, you just need to follow the same process as "
"the creation of accounts. The only difference being that you must use the"
" ``account.tax.template`` model."
msgstr ""

#: ../../webservices/localization.rst:272
msgid "An example found in the ``l10n_pl`` module:"
msgstr ""

#: ../../webservices/localization.rst:291
msgid "Adding a new fiscal position to my Chart of Accounts"
msgstr ""

#: ../../webservices/localization.rst:294
msgid ""
"If you need more information about what is a fiscal position and how it "
"works in Odoo, please refer to `How to adapt taxes to my customer status "
"or localization "
"<https://www.odoo.com/documentation/user/online/accounting/others/taxes/application.html>`_."
msgstr ""

#: ../../webservices/localization.rst:296
msgid ""
"To create a new fiscal position, simply use the "
"``account.fiscal.position.template`` model:"
msgstr ""

#: ../../webservices/localization.rst:312
msgid "Adding the properties to my Chart of Accounts"
msgstr ""

#: ../../webservices/localization.rst:314
msgid ""
"When the whole accounts are generated, you have the possibility to "
"override the newly generated chart of accounts by adding some properties "
"that correspond to default accounts used in certain situations. This must"
" be done after the creation of accounts before each one must be linked to"
" the chart of accounts."
msgstr ""

#: ../../webservices/localization.rst:347
msgid ""
"For example, let's come back to the Belgium PCMN. This chart of accounts "
"is override in this way to add some properties."
msgstr ""

#: ../../webservices/localization.rst:362
msgid "How to create a new bank operation model?"
msgstr ""

#: ../../webservices/localization.rst:365
msgid ""
"How a bank operation model works exactly in Odoo? See `Configure model of"
" entries "
"<https://www.odoo.com/documentation/user/online/accounting/bank/reconciliation/configure.html>`_."
msgstr ""

#: ../../webservices/localization.rst:367
msgid ""
"Since ``V10``, a new feature is available in the bank statement "
"reconciliation widget: the bank operation model. This allows the user to "
"pre-fill some accounting entries with a single click. The creation of an "
"``account.reconcile.model.template`` record is quite easy:"
msgstr ""

#: ../../webservices/localization.rst:413
msgid "How to create a new dynamic report?"
msgstr ""

#: ../../webservices/localization.rst:415
msgid ""
"If you need to add some reports on your localization, you need to create "
"a new module named **l10n_xx_reports**. Furthermore, this additional "
"module must be present in the ``enterprise`` repository and must have at "
"least two dependencies, one to bring all the stuff for your localization "
"module and one more, ``account_reports``, to design dynamic reports."
msgstr ""

#: ../../webservices/localization.rst:423
msgid ""
"Once it's done, you can start the creation of your report statements. The"
" documentation is available in the following `slides "
"<https://www.odoo.com/slides/slide/how-to-create-custom-accounting-"
"report-415>`_."
msgstr ""

